
WritingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000364c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800375c  0800375c  0000475c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003788  08003788  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003788  08003788  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003788  08003788  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003788  08003788  00004788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800378c  0800378c  0000478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003790  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  080037ec  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080037ec  000052b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f76a  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb1  00000000  00000000  000147ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  000166a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c8  00000000  00000000  00017208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190d5  00000000  00000000  00017ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d05f  00000000  00000000  00030ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b755  00000000  00000000  0003dc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9359  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003434  00000000  00000000  000c939c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000cc7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003744 	.word	0x08003744

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08003744 	.word	0x08003744

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_frsub>:
 80005d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80005dc:	e002      	b.n	80005e4 <__addsf3>
 80005de:	bf00      	nop

080005e0 <__aeabi_fsub>:
 80005e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080005e4 <__addsf3>:
 80005e4:	0042      	lsls	r2, r0, #1
 80005e6:	bf1f      	itttt	ne
 80005e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005ec:	ea92 0f03 	teqne	r2, r3
 80005f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f8:	d06a      	beq.n	80006d0 <__addsf3+0xec>
 80005fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000602:	bfc1      	itttt	gt
 8000604:	18d2      	addgt	r2, r2, r3
 8000606:	4041      	eorgt	r1, r0
 8000608:	4048      	eorgt	r0, r1
 800060a:	4041      	eorgt	r1, r0
 800060c:	bfb8      	it	lt
 800060e:	425b      	neglt	r3, r3
 8000610:	2b19      	cmp	r3, #25
 8000612:	bf88      	it	hi
 8000614:	4770      	bxhi	lr
 8000616:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800061e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800062a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800062e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000632:	bf18      	it	ne
 8000634:	4249      	negne	r1, r1
 8000636:	ea92 0f03 	teq	r2, r3
 800063a:	d03f      	beq.n	80006bc <__addsf3+0xd8>
 800063c:	f1a2 0201 	sub.w	r2, r2, #1
 8000640:	fa41 fc03 	asr.w	ip, r1, r3
 8000644:	eb10 000c 	adds.w	r0, r0, ip
 8000648:	f1c3 0320 	rsb	r3, r3, #32
 800064c:	fa01 f103 	lsl.w	r1, r1, r3
 8000650:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000654:	d502      	bpl.n	800065c <__addsf3+0x78>
 8000656:	4249      	negs	r1, r1
 8000658:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800065c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000660:	d313      	bcc.n	800068a <__addsf3+0xa6>
 8000662:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000666:	d306      	bcc.n	8000676 <__addsf3+0x92>
 8000668:	0840      	lsrs	r0, r0, #1
 800066a:	ea4f 0131 	mov.w	r1, r1, rrx
 800066e:	f102 0201 	add.w	r2, r2, #1
 8000672:	2afe      	cmp	r2, #254	@ 0xfe
 8000674:	d251      	bcs.n	800071a <__addsf3+0x136>
 8000676:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800067a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800067e:	bf08      	it	eq
 8000680:	f020 0001 	biceq.w	r0, r0, #1
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	4770      	bx	lr
 800068a:	0049      	lsls	r1, r1, #1
 800068c:	eb40 0000 	adc.w	r0, r0, r0
 8000690:	3a01      	subs	r2, #1
 8000692:	bf28      	it	cs
 8000694:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000698:	d2ed      	bcs.n	8000676 <__addsf3+0x92>
 800069a:	fab0 fc80 	clz	ip, r0
 800069e:	f1ac 0c08 	sub.w	ip, ip, #8
 80006a2:	ebb2 020c 	subs.w	r2, r2, ip
 80006a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006aa:	bfaa      	itet	ge
 80006ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006b0:	4252      	neglt	r2, r2
 80006b2:	4318      	orrge	r0, r3
 80006b4:	bfbc      	itt	lt
 80006b6:	40d0      	lsrlt	r0, r2
 80006b8:	4318      	orrlt	r0, r3
 80006ba:	4770      	bx	lr
 80006bc:	f092 0f00 	teq	r2, #0
 80006c0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80006c4:	bf06      	itte	eq
 80006c6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80006ca:	3201      	addeq	r2, #1
 80006cc:	3b01      	subne	r3, #1
 80006ce:	e7b5      	b.n	800063c <__addsf3+0x58>
 80006d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006d8:	bf18      	it	ne
 80006da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006de:	d021      	beq.n	8000724 <__addsf3+0x140>
 80006e0:	ea92 0f03 	teq	r2, r3
 80006e4:	d004      	beq.n	80006f0 <__addsf3+0x10c>
 80006e6:	f092 0f00 	teq	r2, #0
 80006ea:	bf08      	it	eq
 80006ec:	4608      	moveq	r0, r1
 80006ee:	4770      	bx	lr
 80006f0:	ea90 0f01 	teq	r0, r1
 80006f4:	bf1c      	itt	ne
 80006f6:	2000      	movne	r0, #0
 80006f8:	4770      	bxne	lr
 80006fa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80006fe:	d104      	bne.n	800070a <__addsf3+0x126>
 8000700:	0040      	lsls	r0, r0, #1
 8000702:	bf28      	it	cs
 8000704:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000708:	4770      	bx	lr
 800070a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800070e:	bf3c      	itt	cc
 8000710:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000714:	4770      	bxcc	lr
 8000716:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800071a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800071e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000722:	4770      	bx	lr
 8000724:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000728:	bf16      	itet	ne
 800072a:	4608      	movne	r0, r1
 800072c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000730:	4601      	movne	r1, r0
 8000732:	0242      	lsls	r2, r0, #9
 8000734:	bf06      	itte	eq
 8000736:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800073a:	ea90 0f01 	teqeq	r0, r1
 800073e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000742:	4770      	bx	lr

08000744 <__aeabi_ui2f>:
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e004      	b.n	8000754 <__aeabi_i2f+0x8>
 800074a:	bf00      	nop

0800074c <__aeabi_i2f>:
 800074c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000750:	bf48      	it	mi
 8000752:	4240      	negmi	r0, r0
 8000754:	ea5f 0c00 	movs.w	ip, r0
 8000758:	bf08      	it	eq
 800075a:	4770      	bxeq	lr
 800075c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000760:	4601      	mov	r1, r0
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	e01c      	b.n	80007a2 <__aeabi_l2f+0x2a>

08000768 <__aeabi_ul2f>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	e00a      	b.n	800078c <__aeabi_l2f+0x14>
 8000776:	bf00      	nop

08000778 <__aeabi_l2f>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__aeabi_l2f+0x14>
 8000786:	4240      	negs	r0, r0
 8000788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078c:	ea5f 0c01 	movs.w	ip, r1
 8000790:	bf02      	ittt	eq
 8000792:	4684      	moveq	ip, r0
 8000794:	4601      	moveq	r1, r0
 8000796:	2000      	moveq	r0, #0
 8000798:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800079c:	bf08      	it	eq
 800079e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80007a6:	fabc f28c 	clz	r2, ip
 80007aa:	3a08      	subs	r2, #8
 80007ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007b0:	db10      	blt.n	80007d4 <__aeabi_l2f+0x5c>
 80007b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007b6:	4463      	add	r3, ip
 80007b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007bc:	f1c2 0220 	rsb	r2, r2, #32
 80007c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80007c4:	fa20 f202 	lsr.w	r2, r0, r2
 80007c8:	eb43 0002 	adc.w	r0, r3, r2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f102 0220 	add.w	r2, r2, #32
 80007d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007e4:	fa21 f202 	lsr.w	r2, r1, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_fmul>:
 80007f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007fc:	bf1e      	ittt	ne
 80007fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000802:	ea92 0f0c 	teqne	r2, ip
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d06f      	beq.n	80008ec <__aeabi_fmul+0xf8>
 800080c:	441a      	add	r2, r3
 800080e:	ea80 0c01 	eor.w	ip, r0, r1
 8000812:	0240      	lsls	r0, r0, #9
 8000814:	bf18      	it	ne
 8000816:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800081a:	d01e      	beq.n	800085a <__aeabi_fmul+0x66>
 800081c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000820:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000824:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000828:	fba0 3101 	umull	r3, r1, r0, r1
 800082c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000830:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000834:	bf3e      	ittt	cc
 8000836:	0049      	lslcc	r1, r1, #1
 8000838:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800083c:	005b      	lslcc	r3, r3, #1
 800083e:	ea40 0001 	orr.w	r0, r0, r1
 8000842:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000846:	2afd      	cmp	r2, #253	@ 0xfd
 8000848:	d81d      	bhi.n	8000886 <__aeabi_fmul+0x92>
 800084a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800084e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000852:	bf08      	it	eq
 8000854:	f020 0001 	biceq.w	r0, r0, #1
 8000858:	4770      	bx	lr
 800085a:	f090 0f00 	teq	r0, #0
 800085e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000862:	bf08      	it	eq
 8000864:	0249      	lsleq	r1, r1, #9
 8000866:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800086a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800086e:	3a7f      	subs	r2, #127	@ 0x7f
 8000870:	bfc2      	ittt	gt
 8000872:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000876:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800087a:	4770      	bxgt	lr
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	3a01      	subs	r2, #1
 8000886:	dc5d      	bgt.n	8000944 <__aeabi_fmul+0x150>
 8000888:	f112 0f19 	cmn.w	r2, #25
 800088c:	bfdc      	itt	le
 800088e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000892:	4770      	bxle	lr
 8000894:	f1c2 0200 	rsb	r2, r2, #0
 8000898:	0041      	lsls	r1, r0, #1
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	f1c2 0220 	rsb	r2, r2, #32
 80008a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008aa:	f140 0000 	adc.w	r0, r0, #0
 80008ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008b2:	bf08      	it	eq
 80008b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008b8:	4770      	bx	lr
 80008ba:	f092 0f00 	teq	r2, #0
 80008be:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80008c2:	bf02      	ittt	eq
 80008c4:	0040      	lsleq	r0, r0, #1
 80008c6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80008ca:	3a01      	subeq	r2, #1
 80008cc:	d0f9      	beq.n	80008c2 <__aeabi_fmul+0xce>
 80008ce:	ea40 000c 	orr.w	r0, r0, ip
 80008d2:	f093 0f00 	teq	r3, #0
 80008d6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008da:	bf02      	ittt	eq
 80008dc:	0049      	lsleq	r1, r1, #1
 80008de:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80008e2:	3b01      	subeq	r3, #1
 80008e4:	d0f9      	beq.n	80008da <__aeabi_fmul+0xe6>
 80008e6:	ea41 010c 	orr.w	r1, r1, ip
 80008ea:	e78f      	b.n	800080c <__aeabi_fmul+0x18>
 80008ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008f0:	ea92 0f0c 	teq	r2, ip
 80008f4:	bf18      	it	ne
 80008f6:	ea93 0f0c 	teqne	r3, ip
 80008fa:	d00a      	beq.n	8000912 <__aeabi_fmul+0x11e>
 80008fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000900:	bf18      	it	ne
 8000902:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000906:	d1d8      	bne.n	80008ba <__aeabi_fmul+0xc6>
 8000908:	ea80 0001 	eor.w	r0, r0, r1
 800090c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000910:	4770      	bx	lr
 8000912:	f090 0f00 	teq	r0, #0
 8000916:	bf17      	itett	ne
 8000918:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800091c:	4608      	moveq	r0, r1
 800091e:	f091 0f00 	teqne	r1, #0
 8000922:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000926:	d014      	beq.n	8000952 <__aeabi_fmul+0x15e>
 8000928:	ea92 0f0c 	teq	r2, ip
 800092c:	d101      	bne.n	8000932 <__aeabi_fmul+0x13e>
 800092e:	0242      	lsls	r2, r0, #9
 8000930:	d10f      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000932:	ea93 0f0c 	teq	r3, ip
 8000936:	d103      	bne.n	8000940 <__aeabi_fmul+0x14c>
 8000938:	024b      	lsls	r3, r1, #9
 800093a:	bf18      	it	ne
 800093c:	4608      	movne	r0, r1
 800093e:	d108      	bne.n	8000952 <__aeabi_fmul+0x15e>
 8000940:	ea80 0001 	eor.w	r0, r0, r1
 8000944:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000950:	4770      	bx	lr
 8000952:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000956:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800095a:	4770      	bx	lr

0800095c <__aeabi_fdiv>:
 800095c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000960:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000964:	bf1e      	ittt	ne
 8000966:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800096a:	ea92 0f0c 	teqne	r2, ip
 800096e:	ea93 0f0c 	teqne	r3, ip
 8000972:	d069      	beq.n	8000a48 <__aeabi_fdiv+0xec>
 8000974:	eba2 0203 	sub.w	r2, r2, r3
 8000978:	ea80 0c01 	eor.w	ip, r0, r1
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000982:	d037      	beq.n	80009f4 <__aeabi_fdiv+0x98>
 8000984:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000988:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800098c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000990:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000994:	428b      	cmp	r3, r1
 8000996:	bf38      	it	cc
 8000998:	005b      	lslcc	r3, r3, #1
 800099a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800099e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80009a2:	428b      	cmp	r3, r1
 80009a4:	bf24      	itt	cs
 80009a6:	1a5b      	subcs	r3, r3, r1
 80009a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009b0:	bf24      	itt	cs
 80009b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009be:	bf24      	itt	cs
 80009c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009cc:	bf24      	itt	cs
 80009ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	bf18      	it	ne
 80009da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009de:	d1e0      	bne.n	80009a2 <__aeabi_fdiv+0x46>
 80009e0:	2afd      	cmp	r2, #253	@ 0xfd
 80009e2:	f63f af50 	bhi.w	8000886 <__aeabi_fmul+0x92>
 80009e6:	428b      	cmp	r3, r1
 80009e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fc:	327f      	adds	r2, #127	@ 0x7f
 80009fe:	bfc2      	ittt	gt
 8000a00:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a08:	4770      	bxgt	lr
 8000a0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a0e:	f04f 0300 	mov.w	r3, #0
 8000a12:	3a01      	subs	r2, #1
 8000a14:	e737      	b.n	8000886 <__aeabi_fmul+0x92>
 8000a16:	f092 0f00 	teq	r2, #0
 8000a1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a1e:	bf02      	ittt	eq
 8000a20:	0040      	lsleq	r0, r0, #1
 8000a22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a26:	3a01      	subeq	r2, #1
 8000a28:	d0f9      	beq.n	8000a1e <__aeabi_fdiv+0xc2>
 8000a2a:	ea40 000c 	orr.w	r0, r0, ip
 8000a2e:	f093 0f00 	teq	r3, #0
 8000a32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a36:	bf02      	ittt	eq
 8000a38:	0049      	lsleq	r1, r1, #1
 8000a3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a3e:	3b01      	subeq	r3, #1
 8000a40:	d0f9      	beq.n	8000a36 <__aeabi_fdiv+0xda>
 8000a42:	ea41 010c 	orr.w	r1, r1, ip
 8000a46:	e795      	b.n	8000974 <__aeabi_fdiv+0x18>
 8000a48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a4c:	ea92 0f0c 	teq	r2, ip
 8000a50:	d108      	bne.n	8000a64 <__aeabi_fdiv+0x108>
 8000a52:	0242      	lsls	r2, r0, #9
 8000a54:	f47f af7d 	bne.w	8000952 <__aeabi_fmul+0x15e>
 8000a58:	ea93 0f0c 	teq	r3, ip
 8000a5c:	f47f af70 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a60:	4608      	mov	r0, r1
 8000a62:	e776      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a64:	ea93 0f0c 	teq	r3, ip
 8000a68:	d104      	bne.n	8000a74 <__aeabi_fdiv+0x118>
 8000a6a:	024b      	lsls	r3, r1, #9
 8000a6c:	f43f af4c 	beq.w	8000908 <__aeabi_fmul+0x114>
 8000a70:	4608      	mov	r0, r1
 8000a72:	e76e      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a78:	bf18      	it	ne
 8000a7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a7e:	d1ca      	bne.n	8000a16 <__aeabi_fdiv+0xba>
 8000a80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000a84:	f47f af5c 	bne.w	8000940 <__aeabi_fmul+0x14c>
 8000a88:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000a8c:	f47f af3c 	bne.w	8000908 <__aeabi_fmul+0x114>
 8000a90:	e75f      	b.n	8000952 <__aeabi_fmul+0x15e>
 8000a92:	bf00      	nop

08000a94 <__gesf2>:
 8000a94:	f04f 3cff 	mov.w	ip, #4294967295
 8000a98:	e006      	b.n	8000aa8 <__cmpsf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__lesf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	e002      	b.n	8000aa8 <__cmpsf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__cmpsf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ab0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab8:	bf18      	it	ne
 8000aba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abe:	d011      	beq.n	8000ae4 <__cmpsf2+0x40>
 8000ac0:	b001      	add	sp, #4
 8000ac2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ac6:	bf18      	it	ne
 8000ac8:	ea90 0f01 	teqne	r0, r1
 8000acc:	bf58      	it	pl
 8000ace:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ad2:	bf88      	it	hi
 8000ad4:	17c8      	asrhi	r0, r1, #31
 8000ad6:	bf38      	it	cc
 8000ad8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000adc:	bf18      	it	ne
 8000ade:	f040 0001 	orrne.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ae8:	d102      	bne.n	8000af0 <__cmpsf2+0x4c>
 8000aea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000aee:	d105      	bne.n	8000afc <__cmpsf2+0x58>
 8000af0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000af4:	d1e4      	bne.n	8000ac0 <__cmpsf2+0x1c>
 8000af6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000afa:	d0e1      	beq.n	8000ac0 <__cmpsf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cfrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4608      	mov	r0, r1
 8000b08:	4661      	mov	r1, ip
 8000b0a:	e7ff      	b.n	8000b0c <__aeabi_cfcmpeq>

08000b0c <__aeabi_cfcmpeq>:
 8000b0c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b0e:	f7ff ffc9 	bl	8000aa4 <__cmpsf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000b1c <__aeabi_fcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_fcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cfcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_fcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffd2 	bl	8000b04 <__aeabi_cfrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc8 	bl	8000b04 <__aeabi_cfrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_fcmpun>:
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_fcmpun+0x14>
 8000b8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b92:	d108      	bne.n	8000ba6 <__aeabi_fcmpun+0x26>
 8000b94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_fcmpun+0x20>
 8000b9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_fcmpun+0x26>
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0001 	mov.w	r0, #1
 8000baa:	4770      	bx	lr

08000bac <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bbc:	d107      	bne.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		// Your interrupt code here (runs every 100 µs)
		HAL_GPIO_TogglePin(STEP_1_GPIO_Port, STEP_1_Pin);
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000bc2:	f001 faef 	bl	80021a4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(STEP_2_GPIO_Port, STEP_2_Pin);
 8000bc6:	2180      	movs	r1, #128	@ 0x80
 8000bc8:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bca:	f001 faeb 	bl	80021a4 <HAL_GPIO_TogglePin>
	}
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40010c00 	.word	0x40010c00
 8000bdc:	40010800 	.word	0x40010800

08000be0 <_Z22update_timer_period_usm>:

void update_timer_period_us(uint32_t microseconds)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	uint32_t ticks = microseconds - 1; // at 1 MHz base
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_DISABLE(&htim2);         // optional: stop timer briefly
 8000bee:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <_Z22update_timer_period_usm+0x84>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6a1a      	ldr	r2, [r3, #32]
 8000bf4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	bf0c      	ite	eq
 8000bfe:	2301      	moveq	r3, #1
 8000c00:	2300      	movne	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d014      	beq.n	8000c32 <_Z22update_timer_period_usm+0x52>
 8000c08:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <_Z22update_timer_period_usm+0x84>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6a1a      	ldr	r2, [r3, #32]
 8000c0e:	f240 4344 	movw	r3, #1092	@ 0x444
 8000c12:	4013      	ands	r3, r2
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	bf0c      	ite	eq
 8000c18:	2301      	moveq	r3, #1
 8000c1a:	2300      	movne	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d007      	beq.n	8000c32 <_Z22update_timer_period_usm+0x52>
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <_Z22update_timer_period_usm+0x84>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <_Z22update_timer_period_usm+0x84>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f022 0201 	bic.w	r2, r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim2, ticks);
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <_Z22update_timer_period_usm+0x84>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <_Z22update_timer_period_usm+0x84>)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // reset counter if you want a clean start
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <_Z22update_timer_period_usm+0x84>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2200      	movs	r2, #0
 8000c46:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(&htim2);          // restart
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <_Z22update_timer_period_usm+0x84>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <_Z22update_timer_period_usm+0x84>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f042 0201 	orr.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	200000e8 	.word	0x200000e8

08000c68 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b092      	sub	sp, #72	@ 0x48
 8000c6c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c6e:	f000 fc49 	bl	8001504 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c72:	f000 f883 	bl	8000d7c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c76:	f000 fa2f 	bl	80010d8 <_ZL12MX_GPIO_Initv>
	MX_CAN_Init();
 8000c7a:	f000 f8db 	bl	8000e34 <_ZL11MX_CAN_Initv>
	MX_TIM2_Init();
 8000c7e:	f000 f975 	bl	8000f6c <_ZL12MX_TIM2_Initv>
	MX_TIM1_Init();
 8000c82:	f000 f913 	bl	8000eac <_ZL12MX_TIM1_Initv>
	MX_TIM3_Init();
 8000c86:	f000 f9cb 	bl	8001020 <_ZL12MX_TIM3_Initv>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000c8a:	f000 f8c6 	bl	8000e1a <_ZL12MX_NVIC_Initv>
	/* USER CODE BEGIN 2 */
	// Enable interrupts
	HAL_TIM_Base_Start_IT(&htim2);
 8000c8e:	4834      	ldr	r0, [pc, #208]	@ (8000d60 <main+0xf8>)
 8000c90:	f001 fed0 	bl	8002a34 <HAL_TIM_Base_Start_IT>

	// Enable stepper motors
	HAL_GPIO_WritePin(ENABLE_STEPPERS_GPIO_Port, ENABLE_STEPPERS_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c9a:	4832      	ldr	r0, [pc, #200]	@ (8000d64 <main+0xfc>)
 8000c9c:	f001 fa6a 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SLEEP_STEPPERS_GPIO_Port, SLEEP_STEPPERS_Pin, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2180      	movs	r1, #128	@ 0x80
 8000ca4:	4830      	ldr	r0, [pc, #192]	@ (8000d68 <main+0x100>)
 8000ca6:	f001 fa65 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_STEPPERS_GPIO_Port, RESET_STEPPERS_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2140      	movs	r1, #64	@ 0x40
 8000cae:	482e      	ldr	r0, [pc, #184]	@ (8000d68 <main+0x100>)
 8000cb0:	f001 fa60 	bl	8002174 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	482b      	ldr	r0, [pc, #172]	@ (8000d68 <main+0x100>)
 8000cba:	f001 fa5b 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2140      	movs	r1, #64	@ 0x40
 8000cc2:	4828      	ldr	r0, [pc, #160]	@ (8000d64 <main+0xfc>)
 8000cc4:	f001 fa56 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_1_GPIO_Port, STEP_1_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2102      	movs	r1, #2
 8000ccc:	4826      	ldr	r0, [pc, #152]	@ (8000d68 <main+0x100>)
 8000cce:	f001 fa51 	bl	8002174 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEP_2_GPIO_Port, STEP_2_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2180      	movs	r1, #128	@ 0x80
 8000cd6:	4823      	ldr	r0, [pc, #140]	@ (8000d64 <main+0xfc>)
 8000cd8:	f001 fa4c 	bl	8002174 <HAL_GPIO_WritePin>

	TCurve curve;
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 fa34 	bl	800314c <_ZN6TCurveC1Ev>

	curve.setAcceleration(50.0f);
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	4921      	ldr	r1, [pc, #132]	@ (8000d6c <main+0x104>)
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f002 fa45 	bl	8003178 <_ZN6TCurve15setAccelerationEf>
	curve.setDeltaPhi(10.0f);
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	491f      	ldr	r1, [pc, #124]	@ (8000d70 <main+0x108>)
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 fa88 	bl	8003208 <_ZN6TCurve11setDeltaPhiEf>
	curve.setMaxVelocity(25.0f);
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	491e      	ldr	r1, [pc, #120]	@ (8000d74 <main+0x10c>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 fa5f 	bl	80031c0 <_ZN6TCurve14setMaxVelocityEf>

	if(curve.recalculateInternalVariables() != TCurveError::OK) Error_Handler();
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fadd 	bl	80032c4 <_ZN6TCurve28recalculateInternalVariablesEv>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	bf14      	ite	ne
 8000d10:	2301      	movne	r3, #1
 8000d12:	2300      	moveq	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <main+0xb6>
 8000d1a:	f000 fa81 	bl	8001220 <Error_Handler>

	float t_max = curve.getTMax();
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4618      	mov	r0, r3
 8000d22:	f002 fac4 	bl	80032ae <_ZN6TCurve7getTMaxEv>
 8000d26:	6438      	str	r0, [r7, #64]	@ 0x40

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t new_period = 200 - 1;   // 200 µs
 8000d28:	23c7      	movs	r3, #199	@ 0xc7
 8000d2a:	647b      	str	r3, [r7, #68]	@ 0x44
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d30:	4811      	ldr	r0, [pc, #68]	@ (8000d78 <main+0x110>)
 8000d32:	f001 fa37 	bl	80021a4 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000d36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d3a:	f000 fc45 	bl	80015c8 <HAL_Delay>
		HAL_GPIO_TogglePin(DIR_1_GPIO_Port, DIR_1_Pin);
 8000d3e:	2101      	movs	r1, #1
 8000d40:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <main+0x100>)
 8000d42:	f001 fa2f 	bl	80021a4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(DIR_2_GPIO_Port, DIR_2_Pin);
 8000d46:	2140      	movs	r1, #64	@ 0x40
 8000d48:	4806      	ldr	r0, [pc, #24]	@ (8000d64 <main+0xfc>)
 8000d4a:	f001 fa2b 	bl	80021a4 <HAL_GPIO_TogglePin>

		update_timer_period_us(new_period);
 8000d4e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000d50:	f7ff ff46 	bl	8000be0 <_Z22update_timer_period_usm>
		new_period += 1;
 8000d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d56:	3301      	adds	r3, #1
 8000d58:	647b      	str	r3, [r7, #68]	@ 0x44
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d5a:	bf00      	nop
 8000d5c:	e7e6      	b.n	8000d2c <main+0xc4>
 8000d5e:	bf00      	nop
 8000d60:	200000e8 	.word	0x200000e8
 8000d64:	40010800 	.word	0x40010800
 8000d68:	40010c00 	.word	0x40010c00
 8000d6c:	42480000 	.word	0x42480000
 8000d70:	41200000 	.word	0x41200000
 8000d74:	41c80000 	.word	0x41c80000
 8000d78:	40011000 	.word	0x40011000

08000d7c <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b090      	sub	sp, #64	@ 0x40
 8000d80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0318 	add.w	r3, r7, #24
 8000d86:	2228      	movs	r2, #40	@ 0x28
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 fca8 	bl	80036e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000da6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dac:	2301      	movs	r3, #1
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2302      	movs	r3, #2
 8000db2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000db8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fa07 	bl	80021d8 <HAL_RCC_OscConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	bf14      	ite	ne
 8000dd0:	2301      	movne	r3, #1
 8000dd2:	2300      	moveq	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <_Z18SystemClock_Configv+0x62>
	{
		Error_Handler();
 8000dda:	f000 fa21 	bl	8001220 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	230f      	movs	r3, #15
 8000de0:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de2:	2302      	movs	r3, #2
 8000de4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2102      	movs	r1, #2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 fc6f 	bl	80026dc <HAL_RCC_ClockConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bf14      	ite	ne
 8000e04:	2301      	movne	r3, #1
 8000e06:	2300      	moveq	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <_Z18SystemClock_Configv+0x96>
	{
		Error_Handler();
 8000e0e:	f000 fa07 	bl	8001220 <Error_Handler>
	}
}
 8000e12:	bf00      	nop
 8000e14:	3740      	adds	r7, #64	@ 0x40
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_ZL12MX_NVIC_Initv>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	201c      	movs	r0, #28
 8000e24:	f000 fff3 	bl	8001e0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e28:	201c      	movs	r0, #28
 8000e2a:	f001 f80c 	bl	8001e46 <HAL_NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <_ZL11MX_CAN_Initv>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <_ZL11MX_CAN_Initv+0x70>)
 8000e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea8 <_ZL11MX_CAN_Initv+0x74>)
 8000e3c:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <_ZL11MX_CAN_Initv+0x70>)
 8000e40:	2210      	movs	r2, #16
 8000e42:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e44:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <_ZL11MX_CAN_Initv+0x70>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <_ZL11MX_CAN_Initv+0x70>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000e50:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <_ZL11MX_CAN_Initv+0x70>)
 8000e52:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000e56:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <_ZL11MX_CAN_Initv+0x70>)
 8000e5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e5e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000e60:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <_ZL11MX_CAN_Initv+0x70>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <_ZL11MX_CAN_Initv+0x70>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <_ZL11MX_CAN_Initv+0x70>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <_ZL11MX_CAN_Initv+0x70>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <_ZL11MX_CAN_Initv+0x70>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <_ZL11MX_CAN_Initv+0x70>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e84:	4807      	ldr	r0, [pc, #28]	@ (8000ea4 <_ZL11MX_CAN_Initv+0x70>)
 8000e86:	f000 fbc3 	bl	8001610 <HAL_CAN_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	bf14      	ite	ne
 8000e90:	2301      	movne	r3, #1
 8000e92:	2300      	moveq	r3, #0
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <_ZL11MX_CAN_Initv+0x6a>
	{
		Error_Handler();
 8000e9a:	f000 f9c1 	bl	8001220 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000078 	.word	0x20000078
 8000ea8:	40006400 	.word	0x40006400

08000eac <_ZL12MX_TIM1_Initv>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ec8:	4b26      	ldr	r3, [pc, #152]	@ (8000f64 <_ZL12MX_TIM1_Initv+0xb8>)
 8000eca:	4a27      	ldr	r2, [pc, #156]	@ (8000f68 <_ZL12MX_TIM1_Initv+0xbc>)
 8000ecc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 720-1;
 8000ece:	4b25      	ldr	r3, [pc, #148]	@ (8000f64 <_ZL12MX_TIM1_Initv+0xb8>)
 8000ed0:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000ed4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed6:	4b23      	ldr	r3, [pc, #140]	@ (8000f64 <_ZL12MX_TIM1_Initv+0xb8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000edc:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <_ZL12MX_TIM1_Initv+0xb8>)
 8000ede:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ee2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f64 <_ZL12MX_TIM1_Initv+0xb8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000eea:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <_ZL12MX_TIM1_Initv+0xb8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <_ZL12MX_TIM1_Initv+0xb8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ef6:	481b      	ldr	r0, [pc, #108]	@ (8000f64 <_ZL12MX_TIM1_Initv+0xb8>)
 8000ef8:	f001 fd4c 	bl	8002994 <HAL_TIM_Base_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bf14      	ite	ne
 8000f02:	2301      	movne	r3, #1
 8000f04:	2300      	moveq	r3, #0
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <_ZL12MX_TIM1_Initv+0x64>
	{
		Error_Handler();
 8000f0c:	f000 f988 	bl	8001220 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f14:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4811      	ldr	r0, [pc, #68]	@ (8000f64 <_ZL12MX_TIM1_Initv+0xb8>)
 8000f1e:	f001 fec5 	bl	8002cac <HAL_TIM_ConfigClockSource>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	bf14      	ite	ne
 8000f28:	2301      	movne	r3, #1
 8000f2a:	2300      	moveq	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <_ZL12MX_TIM1_Initv+0x8a>
	{
		Error_Handler();
 8000f32:	f000 f975 	bl	8001220 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f3e:	463b      	mov	r3, r7
 8000f40:	4619      	mov	r1, r3
 8000f42:	4808      	ldr	r0, [pc, #32]	@ (8000f64 <_ZL12MX_TIM1_Initv+0xb8>)
 8000f44:	f002 f898 	bl	8003078 <HAL_TIMEx_MasterConfigSynchronization>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bf14      	ite	ne
 8000f4e:	2301      	movne	r3, #1
 8000f50:	2300      	moveq	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <_ZL12MX_TIM1_Initv+0xb0>
	{
		Error_Handler();
 8000f58:	f000 f962 	bl	8001220 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200000a0 	.word	0x200000a0
 8000f68:	40012c00 	.word	0x40012c00

08000f6c <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000f88:	4b24      	ldr	r3, [pc, #144]	@ (800101c <_ZL12MX_TIM2_Initv+0xb0>)
 8000f8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f8e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72-1;
 8000f90:	4b22      	ldr	r3, [pc, #136]	@ (800101c <_ZL12MX_TIM2_Initv+0xb0>)
 8000f92:	2247      	movs	r2, #71	@ 0x47
 8000f94:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <_ZL12MX_TIM2_Initv+0xb0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100-1;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <_ZL12MX_TIM2_Initv+0xb0>)
 8000f9e:	2263      	movs	r2, #99	@ 0x63
 8000fa0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <_ZL12MX_TIM2_Initv+0xb0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <_ZL12MX_TIM2_Initv+0xb0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fae:	481b      	ldr	r0, [pc, #108]	@ (800101c <_ZL12MX_TIM2_Initv+0xb0>)
 8000fb0:	f001 fcf0 	bl	8002994 <HAL_TIM_Base_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf14      	ite	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	2300      	moveq	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <_ZL12MX_TIM2_Initv+0x5c>
	{
		Error_Handler();
 8000fc4:	f000 f92c 	bl	8001220 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fcc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4811      	ldr	r0, [pc, #68]	@ (800101c <_ZL12MX_TIM2_Initv+0xb0>)
 8000fd6:	f001 fe69 	bl	8002cac <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bf14      	ite	ne
 8000fe0:	2301      	movne	r3, #1
 8000fe2:	2300      	moveq	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <_ZL12MX_TIM2_Initv+0x82>
	{
		Error_Handler();
 8000fea:	f000 f919 	bl	8001220 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4808      	ldr	r0, [pc, #32]	@ (800101c <_ZL12MX_TIM2_Initv+0xb0>)
 8000ffc:	f002 f83c 	bl	8003078 <HAL_TIMEx_MasterConfigSynchronization>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	bf14      	ite	ne
 8001006:	2301      	movne	r3, #1
 8001008:	2300      	moveq	r3, #0
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <_ZL12MX_TIM2_Initv+0xa8>
	{
		Error_Handler();
 8001010:	f000 f906 	bl	8001220 <Error_Handler>
	/* USER CODE BEGIN TIM2_Init 2 */


	/* USER CODE END TIM2_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200000e8 	.word	0x200000e8

08001020 <_ZL12MX_TIM3_Initv>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800103c:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <_ZL12MX_TIM3_Initv+0xb0>)
 800103e:	4a25      	ldr	r2, [pc, #148]	@ (80010d4 <_ZL12MX_TIM3_Initv+0xb4>)
 8001040:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72-1;
 8001042:	4b23      	ldr	r3, [pc, #140]	@ (80010d0 <_ZL12MX_TIM3_Initv+0xb0>)
 8001044:	2247      	movs	r2, #71	@ 0x47
 8001046:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001048:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <_ZL12MX_TIM3_Initv+0xb0>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800104e:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <_ZL12MX_TIM3_Initv+0xb0>)
 8001050:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001054:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001056:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <_ZL12MX_TIM3_Initv+0xb0>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105c:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <_ZL12MX_TIM3_Initv+0xb0>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001062:	481b      	ldr	r0, [pc, #108]	@ (80010d0 <_ZL12MX_TIM3_Initv+0xb0>)
 8001064:	f001 fc96 	bl	8002994 <HAL_TIM_Base_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf14      	ite	ne
 800106e:	2301      	movne	r3, #1
 8001070:	2300      	moveq	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <_ZL12MX_TIM3_Initv+0x5c>
	{
		Error_Handler();
 8001078:	f000 f8d2 	bl	8001220 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001080:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	4619      	mov	r1, r3
 8001088:	4811      	ldr	r0, [pc, #68]	@ (80010d0 <_ZL12MX_TIM3_Initv+0xb0>)
 800108a:	f001 fe0f 	bl	8002cac <HAL_TIM_ConfigClockSource>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	bf14      	ite	ne
 8001094:	2301      	movne	r3, #1
 8001096:	2300      	moveq	r3, #0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <_ZL12MX_TIM3_Initv+0x82>
	{
		Error_Handler();
 800109e:	f000 f8bf 	bl	8001220 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4808      	ldr	r0, [pc, #32]	@ (80010d0 <_ZL12MX_TIM3_Initv+0xb0>)
 80010b0:	f001 ffe2 	bl	8003078 <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf14      	ite	ne
 80010ba:	2301      	movne	r3, #1
 80010bc:	2300      	moveq	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <_ZL12MX_TIM3_Initv+0xa8>
	{
		Error_Handler();
 80010c4:	f000 f8ac 	bl	8001220 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000130 	.word	0x20000130
 80010d4:	40000400 	.word	0x40000400

080010d8 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	4b48      	ldr	r3, [pc, #288]	@ (8001210 <_ZL12MX_GPIO_Initv+0x138>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a47      	ldr	r2, [pc, #284]	@ (8001210 <_ZL12MX_GPIO_Initv+0x138>)
 80010f2:	f043 0310 	orr.w	r3, r3, #16
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b45      	ldr	r3, [pc, #276]	@ (8001210 <_ZL12MX_GPIO_Initv+0x138>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0310 	and.w	r3, r3, #16
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001104:	4b42      	ldr	r3, [pc, #264]	@ (8001210 <_ZL12MX_GPIO_Initv+0x138>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a41      	ldr	r2, [pc, #260]	@ (8001210 <_ZL12MX_GPIO_Initv+0x138>)
 800110a:	f043 0320 	orr.w	r3, r3, #32
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b3f      	ldr	r3, [pc, #252]	@ (8001210 <_ZL12MX_GPIO_Initv+0x138>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0320 	and.w	r3, r3, #32
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b3c      	ldr	r3, [pc, #240]	@ (8001210 <_ZL12MX_GPIO_Initv+0x138>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a3b      	ldr	r2, [pc, #236]	@ (8001210 <_ZL12MX_GPIO_Initv+0x138>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b39      	ldr	r3, [pc, #228]	@ (8001210 <_ZL12MX_GPIO_Initv+0x138>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001134:	4b36      	ldr	r3, [pc, #216]	@ (8001210 <_ZL12MX_GPIO_Initv+0x138>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a35      	ldr	r2, [pc, #212]	@ (8001210 <_ZL12MX_GPIO_Initv+0x138>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b33      	ldr	r3, [pc, #204]	@ (8001210 <_ZL12MX_GPIO_Initv+0x138>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001152:	4830      	ldr	r0, [pc, #192]	@ (8001214 <_ZL12MX_GPIO_Initv+0x13c>)
 8001154:	f001 f80e 	bl	8002174 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, DIR_2_Pin|STEP_2_Pin|ENABLE_STEPPERS_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 6198 	mov.w	r1, #1216	@ 0x4c0
 800115e:	482e      	ldr	r0, [pc, #184]	@ (8001218 <_ZL12MX_GPIO_Initv+0x140>)
 8001160:	f001 f808 	bl	8002174 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DIR_1_Pin|STEP_1_Pin|SLEEP_STEPPERS_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	2183      	movs	r1, #131	@ 0x83
 8001168:	482c      	ldr	r0, [pc, #176]	@ (800121c <_ZL12MX_GPIO_Initv+0x144>)
 800116a:	f001 f803 	bl	8002174 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, MS3_Pin|MS2_Pin|MS1_Pin|RESET_STEPPERS_Pin, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2178      	movs	r1, #120	@ 0x78
 8001172:	482a      	ldr	r0, [pc, #168]	@ (800121c <_ZL12MX_GPIO_Initv+0x144>)
 8001174:	f000 fffe 	bl	8002174 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001178:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800117c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2302      	movs	r3, #2
 8001188:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	4619      	mov	r1, r3
 8001190:	4820      	ldr	r0, [pc, #128]	@ (8001214 <_ZL12MX_GPIO_Initv+0x13c>)
 8001192:	f000 fe73 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR_2_Pin ENABLE_STEPPERS_Pin */
	GPIO_InitStruct.Pin = DIR_2_Pin|ENABLE_STEPPERS_Pin;
 8001196:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800119a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	4619      	mov	r1, r3
 80011ae:	481a      	ldr	r0, [pc, #104]	@ (8001218 <_ZL12MX_GPIO_Initv+0x140>)
 80011b0:	f000 fe64 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pin : STEP_2_Pin */
	GPIO_InitStruct.Pin = STEP_2_Pin;
 80011b4:	2380      	movs	r3, #128	@ 0x80
 80011b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	4813      	ldr	r0, [pc, #76]	@ (8001218 <_ZL12MX_GPIO_Initv+0x140>)
 80011cc:	f000 fe56 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pins : DIR_1_Pin MS3_Pin MS2_Pin MS1_Pin
                           RESET_STEPPERS_Pin SLEEP_STEPPERS_Pin */
	GPIO_InitStruct.Pin = DIR_1_Pin|MS3_Pin|MS2_Pin|MS1_Pin
 80011d0:	23f9      	movs	r3, #249	@ 0xf9
 80011d2:	613b      	str	r3, [r7, #16]
			|RESET_STEPPERS_Pin|SLEEP_STEPPERS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2302      	movs	r3, #2
 80011de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	480d      	ldr	r0, [pc, #52]	@ (800121c <_ZL12MX_GPIO_Initv+0x144>)
 80011e8:	f000 fe48 	bl	8001e7c <HAL_GPIO_Init>

	/*Configure GPIO pin : STEP_1_Pin */
	GPIO_InitStruct.Pin = STEP_1_Pin;
 80011ec:	2302      	movs	r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <_ZL12MX_GPIO_Initv+0x144>)
 8001204:	f000 fe3a 	bl	8001e7c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	40011000 	.word	0x40011000
 8001218:	40010800 	.word	0x40010800
 800121c:	40010c00 	.word	0x40010c00

08001220 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <Error_Handler+0x8>

0800122c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <HAL_MspInit+0x5c>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <HAL_MspInit+0x5c>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6193      	str	r3, [r2, #24]
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <HAL_MspInit+0x5c>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_MspInit+0x5c>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <HAL_MspInit+0x5c>)
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001254:	61d3      	str	r3, [r2, #28]
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <HAL_MspInit+0x5c>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001262:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <HAL_MspInit+0x60>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4a04      	ldr	r2, [pc, #16]	@ (800128c <HAL_MspInit+0x60>)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000

08001290 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a28      	ldr	r2, [pc, #160]	@ (800134c <HAL_CAN_MspInit+0xbc>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d149      	bne.n	8001344 <HAL_CAN_MspInit+0xb4>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012b0:	4b27      	ldr	r3, [pc, #156]	@ (8001350 <HAL_CAN_MspInit+0xc0>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	4a26      	ldr	r2, [pc, #152]	@ (8001350 <HAL_CAN_MspInit+0xc0>)
 80012b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012ba:	61d3      	str	r3, [r2, #28]
 80012bc:	4b24      	ldr	r3, [pc, #144]	@ (8001350 <HAL_CAN_MspInit+0xc0>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <HAL_CAN_MspInit+0xc0>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a20      	ldr	r2, [pc, #128]	@ (8001350 <HAL_CAN_MspInit+0xc0>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <HAL_CAN_MspInit+0xc0>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4619      	mov	r1, r3
 80012f4:	4817      	ldr	r0, [pc, #92]	@ (8001354 <HAL_CAN_MspInit+0xc4>)
 80012f6:	f000 fdc1 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	4811      	ldr	r0, [pc, #68]	@ (8001354 <HAL_CAN_MspInit+0xc4>)
 8001310:	f000 fdb4 	bl	8001e7c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	2014      	movs	r0, #20
 800131a:	f000 fd78 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800131e:	2014      	movs	r0, #20
 8001320:	f000 fd91 	bl	8001e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	2101      	movs	r1, #1
 8001328:	2015      	movs	r0, #21
 800132a:	f000 fd70 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800132e:	2015      	movs	r0, #21
 8001330:	f000 fd89 	bl	8001e46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2016      	movs	r0, #22
 800133a:	f000 fd68 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800133e:	2016      	movs	r0, #22
 8001340:	f000 fd81 	bl	8001e46 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001344:	bf00      	nop
 8001346:	3720      	adds	r7, #32
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40006400 	.word	0x40006400
 8001350:	40021000 	.word	0x40021000
 8001354:	40010800 	.word	0x40010800

08001358 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1f      	ldr	r2, [pc, #124]	@ (80013e4 <HAL_TIM_Base_MspInit+0x8c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d10c      	bne.n	8001384 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <HAL_TIM_Base_MspInit+0x90>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	4a1e      	ldr	r2, [pc, #120]	@ (80013e8 <HAL_TIM_Base_MspInit+0x90>)
 8001370:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001374:	6193      	str	r3, [r2, #24]
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <HAL_TIM_Base_MspInit+0x90>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001382:	e02a      	b.n	80013da <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800138c:	d10c      	bne.n	80013a8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <HAL_TIM_Base_MspInit+0x90>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a15      	ldr	r2, [pc, #84]	@ (80013e8 <HAL_TIM_Base_MspInit+0x90>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <HAL_TIM_Base_MspInit+0x90>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
}
 80013a6:	e018      	b.n	80013da <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0f      	ldr	r2, [pc, #60]	@ (80013ec <HAL_TIM_Base_MspInit+0x94>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d113      	bne.n	80013da <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b2:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <HAL_TIM_Base_MspInit+0x90>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a0c      	ldr	r2, [pc, #48]	@ (80013e8 <HAL_TIM_Base_MspInit+0x90>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_TIM_Base_MspInit+0x90>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	201d      	movs	r0, #29
 80013d0:	f000 fd1d 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013d4:	201d      	movs	r0, #29
 80013d6:	f000 fd36 	bl	8001e46 <HAL_NVIC_EnableIRQ>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40012c00 	.word	0x40012c00
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40000400 	.word	0x40000400

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <NMI_Handler+0x4>

080013f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <MemManage_Handler+0x4>

08001408 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <UsageFault_Handler+0x4>

08001418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 f8a6 	bl	8001590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800144e:	f000 f9da 	bl	8001806 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000078 	.word	0x20000078

0800145c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <CAN1_RX1_IRQHandler+0x10>)
 8001462:	f000 f9d0 	bl	8001806 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000078 	.word	0x20000078

08001470 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <CAN1_SCE_IRQHandler+0x10>)
 8001476:	f000 f9c6 	bl	8001806 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000078 	.word	0x20000078

08001484 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001488:	4802      	ldr	r0, [pc, #8]	@ (8001494 <TIM2_IRQHandler+0x10>)
 800148a:	f001 fb1f 	bl	8002acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200000e8 	.word	0x200000e8

08001498 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800149c:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <TIM3_IRQHandler+0x10>)
 800149e:	f001 fb15 	bl	8002acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000130 	.word	0x20000130

080014ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b8:	f7ff fff8 	bl	80014ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014bc:	480b      	ldr	r0, [pc, #44]	@ (80014ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014be:	490c      	ldr	r1, [pc, #48]	@ (80014f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014c0:	4a0c      	ldr	r2, [pc, #48]	@ (80014f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014d4:	4c09      	ldr	r4, [pc, #36]	@ (80014fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e2:	f002 f90b 	bl	80036fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014e6:	f7ff fbbf 	bl	8000c68 <main>
  bx lr
 80014ea:	4770      	bx	lr
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014f4:	08003790 	.word	0x08003790
  ldr r2, =_sbss
 80014f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80014fc:	200002b4 	.word	0x200002b4

08001500 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC1_2_IRQHandler>
	...

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001508:	4b08      	ldr	r3, [pc, #32]	@ (800152c <HAL_Init+0x28>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a07      	ldr	r2, [pc, #28]	@ (800152c <HAL_Init+0x28>)
 800150e:	f043 0310 	orr.w	r3, r3, #16
 8001512:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 fc6f 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151a:	200f      	movs	r0, #15
 800151c:	f000 f808 	bl	8001530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001520:	f7ff fe84 	bl	800122c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40022000 	.word	0x40022000

08001530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_InitTick+0x54>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <HAL_InitTick+0x58>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001546:	fbb3 f3f1 	udiv	r3, r3, r1
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fc87 	bl	8001e62 <HAL_SYSTICK_Config>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e00e      	b.n	800157c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d80a      	bhi.n	800157a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001564:	2200      	movs	r2, #0
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f000 fc4f 	bl	8001e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001570:	4a06      	ldr	r2, [pc, #24]	@ (800158c <HAL_InitTick+0x5c>)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e000      	b.n	800157c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000000 	.word	0x20000000
 8001588:	20000008 	.word	0x20000008
 800158c:	20000004 	.word	0x20000004

08001590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001594:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_IncTick+0x1c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <HAL_IncTick+0x20>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	4a03      	ldr	r2, [pc, #12]	@ (80015b0 <HAL_IncTick+0x20>)
 80015a2:	6013      	str	r3, [r2, #0]
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000178 	.word	0x20000178

080015b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;
 80015b8:	4b02      	ldr	r3, [pc, #8]	@ (80015c4 <HAL_GetTick+0x10>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	20000178 	.word	0x20000178

080015c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff fff0 	bl	80015b4 <HAL_GetTick>
 80015d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d005      	beq.n	80015ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_Delay+0x44>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4413      	add	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ee:	bf00      	nop
 80015f0:	f7ff ffe0 	bl	80015b4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d8f7      	bhi.n	80015f0 <HAL_Delay+0x28>
  {
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008

08001610 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0ed      	b.n	80017fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff fe2e 	bl	8001290 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001644:	f7ff ffb6 	bl	80015b4 <HAL_GetTick>
 8001648:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800164a:	e012      	b.n	8001672 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800164c:	f7ff ffb2 	bl	80015b4 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b0a      	cmp	r3, #10
 8001658:	d90b      	bls.n	8001672 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2205      	movs	r2, #5
 800166a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0c5      	b.n	80017fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0e5      	beq.n	800164c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0202 	bic.w	r2, r2, #2
 800168e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001690:	f7ff ff90 	bl	80015b4 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001696:	e012      	b.n	80016be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001698:	f7ff ff8c 	bl	80015b4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	d90b      	bls.n	80016be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2205      	movs	r2, #5
 80016b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e09f      	b.n	80017fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1e5      	bne.n	8001698 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7e1b      	ldrb	r3, [r3, #24]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d108      	bne.n	80016e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	e007      	b.n	80016f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7e5b      	ldrb	r3, [r3, #25]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d108      	bne.n	8001710 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e007      	b.n	8001720 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800171e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7e9b      	ldrb	r3, [r3, #26]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d108      	bne.n	800173a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0220 	orr.w	r2, r2, #32
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	e007      	b.n	800174a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0220 	bic.w	r2, r2, #32
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7edb      	ldrb	r3, [r3, #27]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d108      	bne.n	8001764 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0210 	bic.w	r2, r2, #16
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e007      	b.n	8001774 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0210 	orr.w	r2, r2, #16
 8001772:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7f1b      	ldrb	r3, [r3, #28]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d108      	bne.n	800178e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0208 	orr.w	r2, r2, #8
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	e007      	b.n	800179e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0208 	bic.w	r2, r2, #8
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7f5b      	ldrb	r3, [r3, #29]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d108      	bne.n	80017b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0204 	orr.w	r2, r2, #4
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e007      	b.n	80017c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0204 	bic.w	r2, r2, #4
 80017c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	ea42 0103 	orr.w	r1, r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	1e5a      	subs	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b08a      	sub	sp, #40	@ 0x28
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d07c      	beq.n	8001946 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d023      	beq.n	800189e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2201      	movs	r2, #1
 800185c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f983 	bl	8001b74 <HAL_CAN_TxMailbox0CompleteCallback>
 800186e:	e016      	b.n	800189e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800187a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
 8001882:	e00c      	b.n	800189e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	d004      	beq.n	8001898 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
 8001896:	e002      	b.n	800189e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f986 	bl	8001baa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d024      	beq.n	80018f2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f962 	bl	8001b86 <HAL_CAN_TxMailbox1CompleteCallback>
 80018c2:	e016      	b.n	80018f2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d004      	beq.n	80018d8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d6:	e00c      	b.n	80018f2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d004      	beq.n	80018ec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ea:	e002      	b.n	80018f2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f965 	bl	8001bbc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d024      	beq.n	8001946 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001904:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f941 	bl	8001b98 <HAL_CAN_TxMailbox2CompleteCallback>
 8001916:	e016      	b.n	8001946 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
 800192a:	e00c      	b.n	8001946 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
 800193e:	e002      	b.n	8001946 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f944 	bl	8001bce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00c      	beq.n	800196a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2210      	movs	r2, #16
 8001968:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00b      	beq.n	800198c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2208      	movs	r2, #8
 8001984:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f933 	bl	8001bf2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f91b 	bl	8001be0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00c      	beq.n	80019ce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d007      	beq.n	80019ce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2210      	movs	r2, #16
 80019cc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	f003 0320 	and.w	r3, r3, #32
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00b      	beq.n	80019f0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2208      	movs	r2, #8
 80019e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f913 	bl	8001c16 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d009      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f8fb 	bl	8001c04 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a0e:	6a3b      	ldr	r3, [r7, #32]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00b      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2210      	movs	r2, #16
 8001a28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f8fc 	bl	8001c28 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2208      	movs	r2, #8
 8001a4a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f8f4 	bl	8001c3a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d07b      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d072      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d03e      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ad4:	2b60      	cmp	r3, #96	@ 0x60
 8001ad6:	d02b      	beq.n	8001b30 <HAL_CAN_IRQHandler+0x32a>
 8001ad8:	2b60      	cmp	r3, #96	@ 0x60
 8001ada:	d82e      	bhi.n	8001b3a <HAL_CAN_IRQHandler+0x334>
 8001adc:	2b50      	cmp	r3, #80	@ 0x50
 8001ade:	d022      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x320>
 8001ae0:	2b50      	cmp	r3, #80	@ 0x50
 8001ae2:	d82a      	bhi.n	8001b3a <HAL_CAN_IRQHandler+0x334>
 8001ae4:	2b40      	cmp	r3, #64	@ 0x40
 8001ae6:	d019      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x316>
 8001ae8:	2b40      	cmp	r3, #64	@ 0x40
 8001aea:	d826      	bhi.n	8001b3a <HAL_CAN_IRQHandler+0x334>
 8001aec:	2b30      	cmp	r3, #48	@ 0x30
 8001aee:	d010      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x30c>
 8001af0:	2b30      	cmp	r3, #48	@ 0x30
 8001af2:	d822      	bhi.n	8001b3a <HAL_CAN_IRQHandler+0x334>
 8001af4:	2b10      	cmp	r3, #16
 8001af6:	d002      	beq.n	8001afe <HAL_CAN_IRQHandler+0x2f8>
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d005      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001afc:	e01d      	b.n	8001b3a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b06:	e019      	b.n	8001b3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	f043 0310 	orr.w	r3, r3, #16
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b10:	e014      	b.n	8001b3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	f043 0320 	orr.w	r3, r3, #32
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b1a:	e00f      	b.n	8001b3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b24:	e00a      	b.n	8001b3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b2e:	e005      	b.n	8001b3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b38:	e000      	b.n	8001b3c <HAL_CAN_IRQHandler+0x336>
            break;
 8001b3a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b4a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2204      	movs	r2, #4
 8001b52:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d008      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f870 	bl	8001c4c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	@ 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
	...

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4906      	ldr	r1, [pc, #24]	@ (8001cf8 <__NVIC_EnableIRQ+0x34>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	@ (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	@ (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	@ 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	@ 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff ff90 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff2d 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff42 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff90 	bl	8001d50 <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5f 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff35 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffa2 	bl	8001db4 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b08b      	sub	sp, #44	@ 0x2c
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8e:	e161      	b.n	8002154 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e90:	2201      	movs	r2, #1
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8150 	bne.w	800214e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4a97      	ldr	r2, [pc, #604]	@ (8002110 <HAL_GPIO_Init+0x294>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d05e      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001eb8:	4a95      	ldr	r2, [pc, #596]	@ (8002110 <HAL_GPIO_Init+0x294>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d875      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ebe:	4a95      	ldr	r2, [pc, #596]	@ (8002114 <HAL_GPIO_Init+0x298>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d058      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a93      	ldr	r2, [pc, #588]	@ (8002114 <HAL_GPIO_Init+0x298>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d86f      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eca:	4a93      	ldr	r2, [pc, #588]	@ (8002118 <HAL_GPIO_Init+0x29c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d052      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ed0:	4a91      	ldr	r2, [pc, #580]	@ (8002118 <HAL_GPIO_Init+0x29c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d869      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ed6:	4a91      	ldr	r2, [pc, #580]	@ (800211c <HAL_GPIO_Init+0x2a0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d04c      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001edc:	4a8f      	ldr	r2, [pc, #572]	@ (800211c <HAL_GPIO_Init+0x2a0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d863      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ee2:	4a8f      	ldr	r2, [pc, #572]	@ (8002120 <HAL_GPIO_Init+0x2a4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d046      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a8d      	ldr	r2, [pc, #564]	@ (8002120 <HAL_GPIO_Init+0x2a4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d85d      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eee:	2b12      	cmp	r3, #18
 8001ef0:	d82a      	bhi.n	8001f48 <HAL_GPIO_Init+0xcc>
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d859      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8001efc <HAL_GPIO_Init+0x80>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f51 	.word	0x08001f51
 8001f04:	08001f63 	.word	0x08001f63
 8001f08:	08001fa5 	.word	0x08001fa5
 8001f0c:	08001fab 	.word	0x08001fab
 8001f10:	08001fab 	.word	0x08001fab
 8001f14:	08001fab 	.word	0x08001fab
 8001f18:	08001fab 	.word	0x08001fab
 8001f1c:	08001fab 	.word	0x08001fab
 8001f20:	08001fab 	.word	0x08001fab
 8001f24:	08001fab 	.word	0x08001fab
 8001f28:	08001fab 	.word	0x08001fab
 8001f2c:	08001fab 	.word	0x08001fab
 8001f30:	08001fab 	.word	0x08001fab
 8001f34:	08001fab 	.word	0x08001fab
 8001f38:	08001fab 	.word	0x08001fab
 8001f3c:	08001fab 	.word	0x08001fab
 8001f40:	08001f59 	.word	0x08001f59
 8001f44:	08001f6d 	.word	0x08001f6d
 8001f48:	4a76      	ldr	r2, [pc, #472]	@ (8002124 <HAL_GPIO_Init+0x2a8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f4e:	e02c      	b.n	8001faa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	623b      	str	r3, [r7, #32]
          break;
 8001f56:	e029      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e024      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	3308      	adds	r3, #8
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e01f      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	330c      	adds	r3, #12
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e01a      	b.n	8001fac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e013      	b.n	8001fac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	611a      	str	r2, [r3, #16]
          break;
 8001f96:	e009      	b.n	8001fac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	615a      	str	r2, [r3, #20]
          break;
 8001fa2:	e003      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
          break;
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x130>
          break;
 8001faa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2bff      	cmp	r3, #255	@ 0xff
 8001fb0:	d801      	bhi.n	8001fb6 <HAL_GPIO_Init+0x13a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	e001      	b.n	8001fba <HAL_GPIO_Init+0x13e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2bff      	cmp	r3, #255	@ 0xff
 8001fc0:	d802      	bhi.n	8001fc8 <HAL_GPIO_Init+0x14c>
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x152>
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	3b08      	subs	r3, #8
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	401a      	ands	r2, r3
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80a9 	beq.w	800214e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8002128 <HAL_GPIO_Init+0x2ac>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a49      	ldr	r2, [pc, #292]	@ (8002128 <HAL_GPIO_Init+0x2ac>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b47      	ldr	r3, [pc, #284]	@ (8002128 <HAL_GPIO_Init+0x2ac>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002014:	4a45      	ldr	r2, [pc, #276]	@ (800212c <HAL_GPIO_Init+0x2b0>)
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	210f      	movs	r1, #15
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	493c      	ldr	r1, [pc, #240]	@ (8002130 <HAL_GPIO_Init+0x2b4>)
 800203e:	428b      	cmp	r3, r1
 8002040:	d00d      	beq.n	800205e <HAL_GPIO_Init+0x1e2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	493b      	ldr	r1, [pc, #236]	@ (8002134 <HAL_GPIO_Init+0x2b8>)
 8002046:	428b      	cmp	r3, r1
 8002048:	d007      	beq.n	800205a <HAL_GPIO_Init+0x1de>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	493a      	ldr	r1, [pc, #232]	@ (8002138 <HAL_GPIO_Init+0x2bc>)
 800204e:	428b      	cmp	r3, r1
 8002050:	d101      	bne.n	8002056 <HAL_GPIO_Init+0x1da>
 8002052:	2302      	movs	r3, #2
 8002054:	e004      	b.n	8002060 <HAL_GPIO_Init+0x1e4>
 8002056:	2303      	movs	r3, #3
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x1e4>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x1e4>
 800205e:	2300      	movs	r3, #0
 8002060:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002062:	f001 0103 	and.w	r1, r1, #3
 8002066:	0089      	lsls	r1, r1, #2
 8002068:	408b      	lsls	r3, r1
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800206e:	492f      	ldr	r1, [pc, #188]	@ (800212c <HAL_GPIO_Init+0x2b0>)
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	3302      	adds	r3, #2
 8002078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002088:	4b2c      	ldr	r3, [pc, #176]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	492b      	ldr	r1, [pc, #172]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002096:	4b29      	ldr	r3, [pc, #164]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	43db      	mvns	r3, r3
 800209e:	4927      	ldr	r1, [pc, #156]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020b0:	4b22      	ldr	r3, [pc, #136]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	4921      	ldr	r1, [pc, #132]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60cb      	str	r3, [r1, #12]
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020be:	4b1f      	ldr	r3, [pc, #124]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	491d      	ldr	r1, [pc, #116]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020d8:	4b18      	ldr	r3, [pc, #96]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4917      	ldr	r1, [pc, #92]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	4913      	ldr	r1, [pc, #76]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01f      	beq.n	8002140 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002100:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	490d      	ldr	r1, [pc, #52]	@ (800213c <HAL_GPIO_Init+0x2c0>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
 800210c:	e01f      	b.n	800214e <HAL_GPIO_Init+0x2d2>
 800210e:	bf00      	nop
 8002110:	10320000 	.word	0x10320000
 8002114:	10310000 	.word	0x10310000
 8002118:	10220000 	.word	0x10220000
 800211c:	10210000 	.word	0x10210000
 8002120:	10120000 	.word	0x10120000
 8002124:	10110000 	.word	0x10110000
 8002128:	40021000 	.word	0x40021000
 800212c:	40010000 	.word	0x40010000
 8002130:	40010800 	.word	0x40010800
 8002134:	40010c00 	.word	0x40010c00
 8002138:	40011000 	.word	0x40011000
 800213c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_GPIO_Init+0x2f4>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	43db      	mvns	r3, r3
 8002148:	4909      	ldr	r1, [pc, #36]	@ (8002170 <HAL_GPIO_Init+0x2f4>)
 800214a:	4013      	ands	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	3301      	adds	r3, #1
 8002152:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	f47f ae96 	bne.w	8001e90 <HAL_GPIO_Init+0x14>
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	372c      	adds	r7, #44	@ 0x2c
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4013      	ands	r3, r2
 80021bc:	041a      	lsls	r2, r3, #16
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	43d9      	mvns	r1, r3
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	400b      	ands	r3, r1
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	611a      	str	r2, [r3, #16]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e272      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8087 	beq.w	8002306 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f8:	4b92      	ldr	r3, [pc, #584]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b04      	cmp	r3, #4
 8002202:	d00c      	beq.n	800221e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002204:	4b8f      	ldr	r3, [pc, #572]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	d112      	bne.n	8002236 <HAL_RCC_OscConfig+0x5e>
 8002210:	4b8c      	ldr	r3, [pc, #560]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800221c:	d10b      	bne.n	8002236 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221e:	4b89      	ldr	r3, [pc, #548]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d06c      	beq.n	8002304 <HAL_RCC_OscConfig+0x12c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d168      	bne.n	8002304 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e24c      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x76>
 8002240:	4b80      	ldr	r3, [pc, #512]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a7f      	ldr	r2, [pc, #508]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	e02e      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x98>
 8002256:	4b7b      	ldr	r3, [pc, #492]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7a      	ldr	r2, [pc, #488]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800225c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b78      	ldr	r3, [pc, #480]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a77      	ldr	r2, [pc, #476]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002268:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e01d      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0xbc>
 800227a:	4b72      	ldr	r3, [pc, #456]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a71      	ldr	r2, [pc, #452]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b6f      	ldr	r3, [pc, #444]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a6e      	ldr	r2, [pc, #440]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e00b      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 8002294:	4b6b      	ldr	r3, [pc, #428]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a6a      	ldr	r2, [pc, #424]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800229a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b68      	ldr	r3, [pc, #416]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a67      	ldr	r2, [pc, #412]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d013      	beq.n	80022dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff f97e 	bl	80015b4 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022bc:	f7ff f97a 	bl	80015b4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	@ 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e200      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0xe4>
 80022da:	e014      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff f96a 	bl	80015b4 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff f966 	bl	80015b4 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	@ 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1ec      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	4b53      	ldr	r3, [pc, #332]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x10c>
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d063      	beq.n	80023da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002312:	4b4c      	ldr	r3, [pc, #304]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800231e:	4b49      	ldr	r3, [pc, #292]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b08      	cmp	r3, #8
 8002328:	d11c      	bne.n	8002364 <HAL_RCC_OscConfig+0x18c>
 800232a:	4b46      	ldr	r3, [pc, #280]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d116      	bne.n	8002364 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	4b43      	ldr	r3, [pc, #268]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_RCC_OscConfig+0x176>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e1c0      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	4b3d      	ldr	r3, [pc, #244]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4939      	ldr	r1, [pc, #228]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	e03a      	b.n	80023da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236c:	4b36      	ldr	r3, [pc, #216]	@ (8002448 <HAL_RCC_OscConfig+0x270>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7ff f91f 	bl	80015b4 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237a:	f7ff f91b 	bl	80015b4 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e1a1      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	4b2d      	ldr	r3, [pc, #180]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002398:	4b2a      	ldr	r3, [pc, #168]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4927      	ldr	r1, [pc, #156]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]
 80023ac:	e015      	b.n	80023da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ae:	4b26      	ldr	r3, [pc, #152]	@ (8002448 <HAL_RCC_OscConfig+0x270>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff f8fe 	bl	80015b4 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023bc:	f7ff f8fa 	bl	80015b4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e180      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d03a      	beq.n	800245c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d019      	beq.n	8002422 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ee:	4b17      	ldr	r3, [pc, #92]	@ (800244c <HAL_RCC_OscConfig+0x274>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7ff f8de 	bl	80015b4 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fc:	f7ff f8da 	bl	80015b4 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e160      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	4b0d      	ldr	r3, [pc, #52]	@ (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800241a:	2001      	movs	r0, #1
 800241c:	f000 fa9c 	bl	8002958 <RCC_Delay>
 8002420:	e01c      	b.n	800245c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002422:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <HAL_RCC_OscConfig+0x274>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7ff f8c4 	bl	80015b4 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242e:	e00f      	b.n	8002450 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7ff f8c0 	bl	80015b4 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d908      	bls.n	8002450 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e146      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	42420000 	.word	0x42420000
 800244c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	4b92      	ldr	r3, [pc, #584]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e9      	bne.n	8002430 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a6 	beq.w	80025b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246e:	4b8b      	ldr	r3, [pc, #556]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10d      	bne.n	8002496 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4b88      	ldr	r3, [pc, #544]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4a87      	ldr	r2, [pc, #540]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002484:	61d3      	str	r3, [r2, #28]
 8002486:	4b85      	ldr	r3, [pc, #532]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b82      	ldr	r3, [pc, #520]	@ (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a2:	4b7f      	ldr	r3, [pc, #508]	@ (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7e      	ldr	r2, [pc, #504]	@ (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7ff f881 	bl	80015b4 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7ff f87d 	bl	80015b4 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	@ 0x64
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e103      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b75      	ldr	r3, [pc, #468]	@ (80026a0 <HAL_RCC_OscConfig+0x4c8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x312>
 80024dc:	4b6f      	ldr	r3, [pc, #444]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a6e      	ldr	r2, [pc, #440]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6213      	str	r3, [r2, #32]
 80024e8:	e02d      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x334>
 80024f2:	4b6a      	ldr	r3, [pc, #424]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a69      	ldr	r2, [pc, #420]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	4b67      	ldr	r3, [pc, #412]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a66      	ldr	r2, [pc, #408]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6213      	str	r3, [r2, #32]
 800250a:	e01c      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b05      	cmp	r3, #5
 8002512:	d10c      	bne.n	800252e <HAL_RCC_OscConfig+0x356>
 8002514:	4b61      	ldr	r3, [pc, #388]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a60      	ldr	r2, [pc, #384]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	6213      	str	r3, [r2, #32]
 8002520:	4b5e      	ldr	r3, [pc, #376]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4a5d      	ldr	r2, [pc, #372]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6213      	str	r3, [r2, #32]
 800252c:	e00b      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 800252e:	4b5b      	ldr	r3, [pc, #364]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a5a      	ldr	r2, [pc, #360]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6213      	str	r3, [r2, #32]
 800253a:	4b58      	ldr	r3, [pc, #352]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a57      	ldr	r2, [pc, #348]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d015      	beq.n	800257a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7ff f831 	bl	80015b4 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7ff f82d 	bl	80015b4 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0b1      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256c:	4b4b      	ldr	r3, [pc, #300]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ee      	beq.n	8002556 <HAL_RCC_OscConfig+0x37e>
 8002578:	e014      	b.n	80025a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7ff f81b 	bl	80015b4 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7ff f817 	bl	80015b4 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e09b      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002598:	4b40      	ldr	r3, [pc, #256]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1ee      	bne.n	8002582 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d105      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025aa:	4b3c      	ldr	r3, [pc, #240]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a3b      	ldr	r2, [pc, #236]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8087 	beq.w	80026ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c0:	4b36      	ldr	r3, [pc, #216]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d061      	beq.n	8002690 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d146      	bne.n	8002662 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d4:	4b33      	ldr	r3, [pc, #204]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7fe ffeb 	bl	80015b4 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7fe ffe7 	bl	80015b4 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e06d      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f4:	4b29      	ldr	r3, [pc, #164]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002608:	d108      	bne.n	800261c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800260a:	4b24      	ldr	r3, [pc, #144]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	4921      	ldr	r1, [pc, #132]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261c:	4b1f      	ldr	r3, [pc, #124]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a19      	ldr	r1, [r3, #32]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	430b      	orrs	r3, r1
 800262e:	491b      	ldr	r1, [pc, #108]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002634:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fe ffbb 	bl	80015b4 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002642:	f7fe ffb7 	bl	80015b4 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e03d      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x46a>
 8002660:	e035      	b.n	80026ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <HAL_RCC_OscConfig+0x4cc>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe ffa4 	bl	80015b4 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe ffa0 	bl	80015b4 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e026      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_RCC_OscConfig+0x4c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x498>
 800268e:	e01e      	b.n	80026ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d107      	bne.n	80026a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e019      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
 800269c:	40021000 	.word	0x40021000
 80026a0:	40007000 	.word	0x40007000
 80026a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026a8:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <HAL_RCC_OscConfig+0x500>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0d0      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b6a      	ldr	r3, [pc, #424]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d910      	bls.n	8002720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b67      	ldr	r3, [pc, #412]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 0207 	bic.w	r2, r3, #7
 8002706:	4965      	ldr	r1, [pc, #404]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b63      	ldr	r3, [pc, #396]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0b8      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002738:	4b59      	ldr	r3, [pc, #356]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a58      	ldr	r2, [pc, #352]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002742:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002750:	4b53      	ldr	r3, [pc, #332]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a52      	ldr	r2, [pc, #328]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800275a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b50      	ldr	r3, [pc, #320]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	494d      	ldr	r1, [pc, #308]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d040      	beq.n	80027fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b47      	ldr	r3, [pc, #284]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d115      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e073      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b3d      	ldr	r3, [pc, #244]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e06b      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ba:	4b39      	ldr	r3, [pc, #228]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4936      	ldr	r1, [pc, #216]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027cc:	f7fe fef2 	bl	80015b4 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7fe feee 	bl	80015b4 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e053      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b2d      	ldr	r3, [pc, #180]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 020c 	and.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1eb      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b27      	ldr	r3, [pc, #156]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d210      	bcs.n	800282c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b24      	ldr	r3, [pc, #144]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 0207 	bic.w	r2, r3, #7
 8002812:	4922      	ldr	r1, [pc, #136]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b20      	ldr	r3, [pc, #128]	@ (800289c <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e032      	b.n	8002892 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4916      	ldr	r1, [pc, #88]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002856:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490e      	ldr	r1, [pc, #56]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800286a:	f000 f821 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 800286e:	4602      	mov	r2, r0
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	490a      	ldr	r1, [pc, #40]	@ (80028a4 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	4a09      	ldr	r2, [pc, #36]	@ (80028a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002886:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <HAL_RCC_ClockConfig+0x1d0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fe50 	bl	8001530 <HAL_InitTick>

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40022000 	.word	0x40022000
 80028a0:	40021000 	.word	0x40021000
 80028a4:	0800375c 	.word	0x0800375c
 80028a8:	20000000 	.word	0x20000000
 80028ac:	20000004 	.word	0x20000004

080028b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x94>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x30>
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0x36>
 80028de:	e027      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028e0:	4b19      	ldr	r3, [pc, #100]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x98>)
 80028e2:	613b      	str	r3, [r7, #16]
      break;
 80028e4:	e027      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	0c9b      	lsrs	r3, r3, #18
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	4a17      	ldr	r2, [pc, #92]	@ (800294c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028f0:	5cd3      	ldrb	r3, [r2, r3]
 80028f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028fe:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <HAL_RCC_GetSysClockFreq+0x94>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	0c5b      	lsrs	r3, r3, #17
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	4a11      	ldr	r2, [pc, #68]	@ (8002950 <HAL_RCC_GetSysClockFreq+0xa0>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a0d      	ldr	r2, [pc, #52]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x98>)
 8002912:	fb03 f202 	mul.w	r2, r3, r2
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e004      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a0c      	ldr	r2, [pc, #48]	@ (8002954 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002924:	fb02 f303 	mul.w	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	613b      	str	r3, [r7, #16]
      break;
 800292e:	e002      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002930:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x98>)
 8002932:	613b      	str	r3, [r7, #16]
      break;
 8002934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002936:	693b      	ldr	r3, [r7, #16]
}
 8002938:	4618      	mov	r0, r3
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	007a1200 	.word	0x007a1200
 800294c:	0800376c 	.word	0x0800376c
 8002950:	0800377c 	.word	0x0800377c
 8002954:	003d0900 	.word	0x003d0900

08002958 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002960:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <RCC_Delay+0x34>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0a      	ldr	r2, [pc, #40]	@ (8002990 <RCC_Delay+0x38>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	0a5b      	lsrs	r3, r3, #9
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002974:	bf00      	nop
  }
  while (Delay --);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1e5a      	subs	r2, r3, #1
 800297a:	60fa      	str	r2, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f9      	bne.n	8002974 <RCC_Delay+0x1c>
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	20000000 	.word	0x20000000
 8002990:	10624dd3 	.word	0x10624dd3

08002994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e041      	b.n	8002a2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fccc 	bl	8001358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3304      	adds	r3, #4
 80029d0:	4619      	mov	r1, r3
 80029d2:	4610      	mov	r0, r2
 80029d4:	f000 fa56 	bl	8002e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d001      	beq.n	8002a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e035      	b.n	8002ab8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a16      	ldr	r2, [pc, #88]	@ (8002ac4 <HAL_TIM_Base_Start_IT+0x90>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d009      	beq.n	8002a82 <HAL_TIM_Base_Start_IT+0x4e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a76:	d004      	beq.n	8002a82 <HAL_TIM_Base_Start_IT+0x4e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a12      	ldr	r2, [pc, #72]	@ (8002ac8 <HAL_TIM_Base_Start_IT+0x94>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d111      	bne.n	8002aa6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b06      	cmp	r3, #6
 8002a92:	d010      	beq.n	8002ab6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa4:	e007      	b.n	8002ab6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0201 	orr.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40000400 	.word	0x40000400

08002acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d020      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01b      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0202 	mvn.w	r2, #2
 8002b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f998 	bl	8002e4c <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f98b 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f99a 	bl	8002e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d020      	beq.n	8002b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01b      	beq.n	8002b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0204 	mvn.w	r2, #4
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f972 	bl	8002e4c <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f965 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f974 	bl	8002e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d020      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01b      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0208 	mvn.w	r2, #8
 8002b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f94c 	bl	8002e4c <HAL_TIM_IC_CaptureCallback>
 8002bb4:	e005      	b.n	8002bc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f93f 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f94e 	bl	8002e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d020      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0210 	mvn.w	r2, #16
 8002be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2208      	movs	r2, #8
 8002bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f926 	bl	8002e4c <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f919 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f928 	bl	8002e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00c      	beq.n	8002c38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d007      	beq.n	8002c38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0201 	mvn.w	r2, #1
 8002c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fd ffba 	bl	8000bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00c      	beq.n	8002c5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa6f 	bl	800313a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00c      	beq.n	8002c80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f8f8 	bl	8002e70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00c      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0220 	mvn.w	r2, #32
 8002c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa42 	bl	8003128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIM_ConfigClockSource+0x1c>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e0b4      	b.n	8002e32 <HAL_TIM_ConfigClockSource+0x186>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d00:	d03e      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0xd4>
 8002d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d06:	f200 8087 	bhi.w	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d0e:	f000 8086 	beq.w	8002e1e <HAL_TIM_ConfigClockSource+0x172>
 8002d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d16:	d87f      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d18:	2b70      	cmp	r3, #112	@ 0x70
 8002d1a:	d01a      	beq.n	8002d52 <HAL_TIM_ConfigClockSource+0xa6>
 8002d1c:	2b70      	cmp	r3, #112	@ 0x70
 8002d1e:	d87b      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d20:	2b60      	cmp	r3, #96	@ 0x60
 8002d22:	d050      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x11a>
 8002d24:	2b60      	cmp	r3, #96	@ 0x60
 8002d26:	d877      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d28:	2b50      	cmp	r3, #80	@ 0x50
 8002d2a:	d03c      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0xfa>
 8002d2c:	2b50      	cmp	r3, #80	@ 0x50
 8002d2e:	d873      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d30:	2b40      	cmp	r3, #64	@ 0x40
 8002d32:	d058      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x13a>
 8002d34:	2b40      	cmp	r3, #64	@ 0x40
 8002d36:	d86f      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b30      	cmp	r3, #48	@ 0x30
 8002d3a:	d064      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x15a>
 8002d3c:	2b30      	cmp	r3, #48	@ 0x30
 8002d3e:	d86b      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d060      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x15a>
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d867      	bhi.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05c      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x15a>
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d05a      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x15a>
 8002d50:	e062      	b.n	8002e18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d62:	f000 f96a 	bl	800303a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	609a      	str	r2, [r3, #8]
      break;
 8002d7e:	e04f      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d90:	f000 f953 	bl	800303a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002da2:	609a      	str	r2, [r3, #8]
      break;
 8002da4:	e03c      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002db2:	461a      	mov	r2, r3
 8002db4:	f000 f8ca 	bl	8002f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2150      	movs	r1, #80	@ 0x50
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f921 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 8002dc4:	e02c      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f000 f8e8 	bl	8002fa8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2160      	movs	r1, #96	@ 0x60
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f911 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 8002de4:	e01c      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	461a      	mov	r2, r3
 8002df4:	f000 f8aa 	bl	8002f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2140      	movs	r1, #64	@ 0x40
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f901 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 8002e04:	e00c      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f000 f8f8 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 8002e16:	e003      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e1c:	e000      	b.n	8002e20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
	...

08002e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a2b      	ldr	r2, [pc, #172]	@ (8002f44 <TIM_Base_SetConfig+0xc0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d007      	beq.n	8002eac <TIM_Base_SetConfig+0x28>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea2:	d003      	beq.n	8002eac <TIM_Base_SetConfig+0x28>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a28      	ldr	r2, [pc, #160]	@ (8002f48 <TIM_Base_SetConfig+0xc4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d108      	bne.n	8002ebe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a20      	ldr	r2, [pc, #128]	@ (8002f44 <TIM_Base_SetConfig+0xc0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d007      	beq.n	8002ed6 <TIM_Base_SetConfig+0x52>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ecc:	d003      	beq.n	8002ed6 <TIM_Base_SetConfig+0x52>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f48 <TIM_Base_SetConfig+0xc4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d108      	bne.n	8002ee8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002f44 <TIM_Base_SetConfig+0xc0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d103      	bne.n	8002f1c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f023 0201 	bic.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	611a      	str	r2, [r3, #16]
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40000400 	.word	0x40000400

08002f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	f023 0201 	bic.w	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f023 030a 	bic.w	r3, r3, #10
 8002f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	621a      	str	r2, [r3, #32]
}
 8002f9e:	bf00      	nop
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f023 0210 	bic.w	r2, r3, #16
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	031b      	lsls	r3, r3, #12
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	621a      	str	r2, [r3, #32]
}
 8002ffc:	bf00      	nop
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800301c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	f043 0307 	orr.w	r3, r3, #7
 8003028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	609a      	str	r2, [r3, #8]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800303a:	b480      	push	{r7}
 800303c:	b087      	sub	sp, #28
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003054:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	021a      	lsls	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	431a      	orrs	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4313      	orrs	r3, r2
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	609a      	str	r2, [r3, #8]
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800308c:	2302      	movs	r3, #2
 800308e:	e041      	b.n	8003114 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a14      	ldr	r2, [pc, #80]	@ (8003120 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d009      	beq.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030dc:	d004      	beq.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a10      	ldr	r2, [pc, #64]	@ (8003124 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10c      	bne.n	8003102 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40012c00 	.word	0x40012c00
 8003124:	40000400 	.word	0x40000400

08003128 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <_ZN6TCurveC1Ev>:

/**
 *   @brief Constructor for TCurve library
 *   @param None
 */
TCurve::TCurve()
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
{
    this->max_acceleration = 0.0f;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	605a      	str	r2, [r3, #4]
    this->max_velocity = 0.0f;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
    this->resetInternalVariables();
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f9f9 	bl	800355c <_ZN6TCurve22resetInternalVariablesEv>
}
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	0000      	movs	r0, r0
	...

08003178 <_ZN6TCurve15setAccelerationEf>:
 * @brief Sets maximal allowed acceleration
 * @param max_accelearation (float)
 * @return TCurveError
 */
TCurveError TCurve::setAcceleration(float max_acceleration)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
    if (max_acceleration < 0.001)
 8003182:	6838      	ldr	r0, [r7, #0]
 8003184:	f7fd f948 	bl	8000418 <__aeabi_f2d>
 8003188:	a30b      	add	r3, pc, #44	@ (adr r3, 80031b8 <_ZN6TCurve15setAccelerationEf+0x40>)
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	f7fd f9fb 	bl	8000588 <__aeabi_dcmplt>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <_ZN6TCurve15setAccelerationEf+0x24>
    {
        /*Maximal acceleration too small or negative*/
        return TCurveError::InvalidSetting;
 8003198:	2302      	movs	r3, #2
 800319a:	e006      	b.n	80031aa <_ZN6TCurve15setAccelerationEf+0x32>
    }
    this->max_acceleration = max_acceleration;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	605a      	str	r2, [r3, #4]
    this->needs_to_be_recalc = 1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	745a      	strb	r2, [r3, #17]
    return TCurveError::OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	f3af 8000 	nop.w
 80031b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80031bc:	3f50624d 	.word	0x3f50624d

080031c0 <_ZN6TCurve14setMaxVelocityEf>:

TCurveError TCurve::setMaxVelocity(float max_velocity)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
    if (max_velocity < 0.001)
 80031ca:	6838      	ldr	r0, [r7, #0]
 80031cc:	f7fd f924 	bl	8000418 <__aeabi_f2d>
 80031d0:	a30b      	add	r3, pc, #44	@ (adr r3, 8003200 <_ZN6TCurve14setMaxVelocityEf+0x40>)
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f7fd f9d7 	bl	8000588 <__aeabi_dcmplt>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <_ZN6TCurve14setMaxVelocityEf+0x24>
    {
        /*Maximal acceleration too small or negative*/
        return TCurveError::InvalidSetting;
 80031e0:	2302      	movs	r3, #2
 80031e2:	e006      	b.n	80031f2 <_ZN6TCurve14setMaxVelocityEf+0x32>
    }
    this->max_velocity = max_velocity;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	609a      	str	r2, [r3, #8]
    this->needs_to_be_recalc = 1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	745a      	strb	r2, [r3, #17]
    return TCurveError::OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	f3af 8000 	nop.w
 8003200:	d2f1a9fc 	.word	0xd2f1a9fc
 8003204:	3f50624d 	.word	0x3f50624d

08003208 <_ZN6TCurve11setDeltaPhiEf>:
/**
 * @brief Set angle difference
 * @param deltaPhi (float)
 */
TCurveError TCurve::setDeltaPhi(float delta_phi)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
    this->resetInternalVariables();
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f9a2 	bl	800355c <_ZN6TCurve22resetInternalVariablesEv>
    if (delta_phi > 0)
 8003218:	f04f 0100 	mov.w	r1, #0
 800321c:	6838      	ldr	r0, [r7, #0]
 800321e:	f7fd fca5 	bl	8000b6c <__aeabi_fcmpgt>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <_ZN6TCurve11setDeltaPhiEf+0x2e>
    {
        this->delta_phi = delta_phi;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	60da      	str	r2, [r3, #12]
        this->sign = 1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	741a      	strb	r2, [r3, #16]
 8003234:	e007      	b.n	8003246 <_ZN6TCurve11setDeltaPhiEf+0x3e>
    }
    else
    {
        this->delta_phi = -delta_phi;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	60da      	str	r2, [r3, #12]
        this->sign = -1;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	22ff      	movs	r2, #255	@ 0xff
 8003244:	741a      	strb	r2, [r3, #16]
    }
    this->needs_to_be_recalc = 1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	745a      	strb	r2, [r3, #17]
    return TCurveError::OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <_ZN6TCurve15getAccelerationEv>:
/**
 * @brief Returns saved maximal acceleration
 * @return maximal accelaration (float)
 */
float TCurve::getAcceleration()
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
    return this->max_acceleration;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr

0800326c <_ZN6TCurve14getMaxVelocityEv>:
/**
 * @brief Returns saved maximal velocity
 * @return maximal velocity (float)
 */
float TCurve::getMaxVelocity()
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
    return this->max_velocity;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <_ZN6TCurve11getDeltaPhiEv>:
/**
 * @brief Returns saved maximal angle difference
 * @return Angle difference (float)
 */
float TCurve::getDeltaPhi()
{
 8003282:	b590      	push	{r4, r7, lr}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
    return this->delta_phi * this->sign;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68dc      	ldr	r4, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd fa59 	bl	800074c <__aeabi_i2f>
 800329a:	4603      	mov	r3, r0
 800329c:	4619      	mov	r1, r3
 800329e:	4620      	mov	r0, r4
 80032a0:	f7fd faa8 	bl	80007f4 <__aeabi_fmul>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd90      	pop	{r4, r7, pc}

080032ae <_ZN6TCurve7getTMaxEv>:
{
    return this->t_2;
}

float TCurve::getTMax()
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
    return this->t_max;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <_ZN6TCurve28recalculateInternalVariablesEv>:

/**
 * @brief Recalculates internal variables such as times and other constants
 */
TCurveError TCurve::recalculateInternalVariables()
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
    if (this->getAcceleration() == 0.0f)
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ffc2 	bl	8003256 <_ZN6TCurve15getAccelerationEv>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2201      	movs	r2, #1
 80032d6:	4614      	mov	r4, r2
 80032d8:	f04f 0100 	mov.w	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd fc1d 	bl	8000b1c <__aeabi_fcmpeq>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <_ZN6TCurve28recalculateInternalVariablesEv+0x28>
 80032e8:	2300      	movs	r3, #0
 80032ea:	461c      	mov	r4, r3
 80032ec:	b2e3      	uxtb	r3, r4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <_ZN6TCurve28recalculateInternalVariablesEv+0x32>
    {
        return TCurveError::NotInitialized;
 80032f2:	2306      	movs	r3, #6
 80032f4:	e12e      	b.n	8003554 <_ZN6TCurve28recalculateInternalVariablesEv+0x290>
    }
    if (this->getDeltaPhi() == 0.0f)
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ffc3 	bl	8003282 <_ZN6TCurve11getDeltaPhiEv>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2201      	movs	r2, #1
 8003300:	4614      	mov	r4, r2
 8003302:	f04f 0100 	mov.w	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f7fd fc08 	bl	8000b1c <__aeabi_fcmpeq>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <_ZN6TCurve28recalculateInternalVariablesEv+0x52>
 8003312:	2300      	movs	r3, #0
 8003314:	461c      	mov	r4, r3
 8003316:	b2e3      	uxtb	r3, r4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <_ZN6TCurve28recalculateInternalVariablesEv+0x5c>
    {
        return TCurveError::NotInitialized;
 800331c:	2306      	movs	r3, #6
 800331e:	e119      	b.n	8003554 <_ZN6TCurve28recalculateInternalVariablesEv+0x290>
    }

    float v, dp, a;
    v = this->getMaxVelocity();
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ffa3 	bl	800326c <_ZN6TCurve14getMaxVelocityEv>
 8003326:	6178      	str	r0, [r7, #20]
    dp = this->getDeltaPhi();
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ffaa 	bl	8003282 <_ZN6TCurve11getDeltaPhiEv>
 800332e:	6138      	str	r0, [r7, #16]
    a = this->getAcceleration();
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff ff90 	bl	8003256 <_ZN6TCurve15getAccelerationEv>
 8003336:	60f8      	str	r0, [r7, #12]
    /* SCurve / TCurve condition */
    bool cond1 = (v * v - dp * a > 0);
 8003338:	6979      	ldr	r1, [r7, #20]
 800333a:	6978      	ldr	r0, [r7, #20]
 800333c:	f7fd fa5a 	bl	80007f4 <__aeabi_fmul>
 8003340:	4603      	mov	r3, r0
 8003342:	461c      	mov	r4, r3
 8003344:	68f9      	ldr	r1, [r7, #12]
 8003346:	6938      	ldr	r0, [r7, #16]
 8003348:	f7fd fa54 	bl	80007f4 <__aeabi_fmul>
 800334c:	4603      	mov	r3, r0
 800334e:	4619      	mov	r1, r3
 8003350:	4620      	mov	r0, r4
 8003352:	f7fd f945 	bl	80005e0 <__aeabi_fsub>
 8003356:	4603      	mov	r3, r0
 8003358:	2201      	movs	r2, #1
 800335a:	4614      	mov	r4, r2
 800335c:	f04f 0100 	mov.w	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd fc03 	bl	8000b6c <__aeabi_fcmpgt>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <_ZN6TCurve28recalculateInternalVariablesEv+0xac>
 800336c:	2300      	movs	r3, #0
 800336e:	461c      	mov	r4, r3
 8003370:	72fc      	strb	r4, [r7, #11]
    bool cond2 = (v == 0.0f);
 8003372:	2301      	movs	r3, #1
 8003374:	461c      	mov	r4, r3
 8003376:	f04f 0100 	mov.w	r1, #0
 800337a:	6978      	ldr	r0, [r7, #20]
 800337c:	f7fd fbce 	bl	8000b1c <__aeabi_fcmpeq>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <_ZN6TCurve28recalculateInternalVariablesEv+0xc6>
 8003386:	2300      	movs	r3, #0
 8003388:	461c      	mov	r4, r3
 800338a:	72bc      	strb	r4, [r7, #10]
    if (cond1 || cond2)
 800338c:	7afb      	ldrb	r3, [r7, #11]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d102      	bne.n	8003398 <_ZN6TCurve28recalculateInternalVariablesEv+0xd4>
 8003392:	7abb      	ldrb	r3, [r7, #10]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d026      	beq.n	80033e6 <_ZN6TCurve28recalculateInternalVariablesEv+0x122>
    {
        /* In this case its SCurve*/
        this->type = TCurveType::SCurve;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	601a      	str	r2, [r3, #0]
        this->t_1 = sqrtf(dp / a);
 800339e:	68f9      	ldr	r1, [r7, #12]
 80033a0:	6938      	ldr	r0, [r7, #16]
 80033a2:	f7fd fadb 	bl	800095c <__aeabi_fdiv>
 80033a6:	4603      	mov	r3, r0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f90f 	bl	80035cc <sqrtf>
 80033ae:	4602      	mov	r2, r0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	615a      	str	r2, [r3, #20]
        this->t_2 = this->t_1;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	619a      	str	r2, [r3, #24]
        this->t_max = 2 * this->t_1;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	4619      	mov	r1, r3
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f90e 	bl	80005e4 <__addsf3>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	61da      	str	r2, [r3, #28]
        this->w_max = a * this->t_1;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	68f9      	ldr	r1, [r7, #12]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd fa0c 	bl	80007f4 <__aeabi_fmul>
 80033dc:	4603      	mov	r3, r0
 80033de:	461a      	mov	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	621a      	str	r2, [r3, #32]
 80033e4:	e0b2      	b.n	800354c <_ZN6TCurve28recalculateInternalVariablesEv+0x288>
    }
    else
    {
        /* In this case its TCurve*/
        this->type = TCurveType::TCurve;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
        this->t_1 = v / a;
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	6978      	ldr	r0, [r7, #20]
 80033f0:	f7fd fab4 	bl	800095c <__aeabi_fdiv>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	615a      	str	r2, [r3, #20]
        this->t_2 = dp / v;
 80033fc:	6979      	ldr	r1, [r7, #20]
 80033fe:	6938      	ldr	r0, [r7, #16]
 8003400:	f7fd faac 	bl	800095c <__aeabi_fdiv>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	619a      	str	r2, [r3, #24]
        this->t_max = (v * v + a * dp) / (a * v);
 800340c:	6979      	ldr	r1, [r7, #20]
 800340e:	6978      	ldr	r0, [r7, #20]
 8003410:	f7fd f9f0 	bl	80007f4 <__aeabi_fmul>
 8003414:	4603      	mov	r3, r0
 8003416:	461c      	mov	r4, r3
 8003418:	6939      	ldr	r1, [r7, #16]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7fd f9ea 	bl	80007f4 <__aeabi_fmul>
 8003420:	4603      	mov	r3, r0
 8003422:	4619      	mov	r1, r3
 8003424:	4620      	mov	r0, r4
 8003426:	f7fd f8dd 	bl	80005e4 <__addsf3>
 800342a:	4603      	mov	r3, r0
 800342c:	461c      	mov	r4, r3
 800342e:	6979      	ldr	r1, [r7, #20]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7fd f9df 	bl	80007f4 <__aeabi_fmul>
 8003436:	4603      	mov	r3, r0
 8003438:	4619      	mov	r1, r3
 800343a:	4620      	mov	r0, r4
 800343c:	f7fd fa8e 	bl	800095c <__aeabi_fdiv>
 8003440:	4603      	mov	r3, r0
 8003442:	461a      	mov	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	61da      	str	r2, [r3, #28]
        this->w_max = a * this->t_1;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	68f9      	ldr	r1, [r7, #12]
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd f9d0 	bl	80007f4 <__aeabi_fmul>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	621a      	str	r2, [r3, #32]
        /* Constants */
        this->constants[0] = 0;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24
        this->constants[1] = 0;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	629a      	str	r2, [r3, #40]	@ 0x28
        this->constants[2] = v;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	62da      	str	r2, [r3, #44]	@ 0x2c
        this->constants[3] = -v*v/(2*a);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003478:	6979      	ldr	r1, [r7, #20]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd f9ba 	bl	80007f4 <__aeabi_fmul>
 8003480:	4603      	mov	r3, r0
 8003482:	461c      	mov	r4, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4619      	mov	r1, r3
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd f8ab 	bl	80005e4 <__addsf3>
 800348e:	4603      	mov	r3, r0
 8003490:	4619      	mov	r1, r3
 8003492:	4620      	mov	r0, r4
 8003494:	f7fd fa62 	bl	800095c <__aeabi_fdiv>
 8003498:	4603      	mov	r3, r0
 800349a:	461a      	mov	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
        this->constants[4] = (v*v+a*dp)/v;
 80034a0:	6979      	ldr	r1, [r7, #20]
 80034a2:	6978      	ldr	r0, [r7, #20]
 80034a4:	f7fd f9a6 	bl	80007f4 <__aeabi_fmul>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461c      	mov	r4, r3
 80034ac:	6939      	ldr	r1, [r7, #16]
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7fd f9a0 	bl	80007f4 <__aeabi_fmul>
 80034b4:	4603      	mov	r3, r0
 80034b6:	4619      	mov	r1, r3
 80034b8:	4620      	mov	r0, r4
 80034ba:	f7fd f893 	bl	80005e4 <__addsf3>
 80034be:	4603      	mov	r3, r0
 80034c0:	6979      	ldr	r1, [r7, #20]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd fa4a 	bl	800095c <__aeabi_fdiv>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	635a      	str	r2, [r3, #52]	@ 0x34
        this->constants[5] = -(a*a*dp*dp+v*v*v*v)/(2*a*v*v);
 80034d0:	68f9      	ldr	r1, [r7, #12]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7fd f98e 	bl	80007f4 <__aeabi_fmul>
 80034d8:	4603      	mov	r3, r0
 80034da:	6939      	ldr	r1, [r7, #16]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd f989 	bl	80007f4 <__aeabi_fmul>
 80034e2:	4603      	mov	r3, r0
 80034e4:	6939      	ldr	r1, [r7, #16]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fd f984 	bl	80007f4 <__aeabi_fmul>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461c      	mov	r4, r3
 80034f0:	6979      	ldr	r1, [r7, #20]
 80034f2:	6978      	ldr	r0, [r7, #20]
 80034f4:	f7fd f97e 	bl	80007f4 <__aeabi_fmul>
 80034f8:	4603      	mov	r3, r0
 80034fa:	6979      	ldr	r1, [r7, #20]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f979 	bl	80007f4 <__aeabi_fmul>
 8003502:	4603      	mov	r3, r0
 8003504:	6979      	ldr	r1, [r7, #20]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fd f974 	bl	80007f4 <__aeabi_fmul>
 800350c:	4603      	mov	r3, r0
 800350e:	4619      	mov	r1, r3
 8003510:	4620      	mov	r0, r4
 8003512:	f7fd f867 	bl	80005e4 <__addsf3>
 8003516:	4603      	mov	r3, r0
 8003518:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4619      	mov	r1, r3
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd f85f 	bl	80005e4 <__addsf3>
 8003526:	4603      	mov	r3, r0
 8003528:	6979      	ldr	r1, [r7, #20]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd f962 	bl	80007f4 <__aeabi_fmul>
 8003530:	4603      	mov	r3, r0
 8003532:	6979      	ldr	r1, [r7, #20]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd f95d 	bl	80007f4 <__aeabi_fmul>
 800353a:	4603      	mov	r3, r0
 800353c:	4619      	mov	r1, r3
 800353e:	4620      	mov	r0, r4
 8003540:	f7fd fa0c 	bl	800095c <__aeabi_fdiv>
 8003544:	4603      	mov	r3, r0
 8003546:	461a      	mov	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    this->needs_to_be_recalc = 0;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	745a      	strb	r2, [r3, #17]
    return TCurveError::OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	371c      	adds	r7, #28
 8003558:	46bd      	mov	sp, r7
 800355a:	bd90      	pop	{r4, r7, pc}

0800355c <_ZN6TCurve22resetInternalVariablesEv>:
 * selected maximal acceleration, velocity and angle diff
 * @param None
 * @return TCurveError
 */
TCurveError TCurve::resetInternalVariables()
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
    this->delta_phi = 0.0f;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	60da      	str	r2, [r3, #12]
    this->sign = 1;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	741a      	strb	r2, [r3, #16]
    this->type = TCurveType::NotInitialized;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	601a      	str	r2, [r3, #0]
    this->t_1 = 0;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	615a      	str	r2, [r3, #20]
    this->t_2 = 0;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	619a      	str	r2, [r3, #24]
    this->t_max = 0;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	61da      	str	r2, [r3, #28]
    this->w_max = 0;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	621a      	str	r2, [r3, #32]
    this->needs_to_be_recalc = 1;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	745a      	strb	r2, [r3, #17]
    for(int i = 0; i < 6; i++)
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	e00a      	b.n	80035ba <_ZN6TCurve22resetInternalVariablesEv+0x5e>
    {
        this->constants[i] = 0;
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3308      	adds	r3, #8
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	605a      	str	r2, [r3, #4]
    for(int i = 0; i < 6; i++)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3301      	adds	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	ddf1      	ble.n	80035a4 <_ZN6TCurve22resetInternalVariablesEv+0x48>
    }
    return TCurveError::OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <sqrtf>:
 80035cc:	b538      	push	{r3, r4, r5, lr}
 80035ce:	4605      	mov	r5, r0
 80035d0:	f000 f816 	bl	8003600 <__ieee754_sqrtf>
 80035d4:	4629      	mov	r1, r5
 80035d6:	4604      	mov	r4, r0
 80035d8:	4628      	mov	r0, r5
 80035da:	f7fd fad1 	bl	8000b80 <__aeabi_fcmpun>
 80035de:	b968      	cbnz	r0, 80035fc <sqrtf+0x30>
 80035e0:	2100      	movs	r1, #0
 80035e2:	4628      	mov	r0, r5
 80035e4:	f7fd faa4 	bl	8000b30 <__aeabi_fcmplt>
 80035e8:	b140      	cbz	r0, 80035fc <sqrtf+0x30>
 80035ea:	f000 f881 	bl	80036f0 <__errno>
 80035ee:	2321      	movs	r3, #33	@ 0x21
 80035f0:	2100      	movs	r1, #0
 80035f2:	6003      	str	r3, [r0, #0]
 80035f4:	4608      	mov	r0, r1
 80035f6:	f7fd f9b1 	bl	800095c <__aeabi_fdiv>
 80035fa:	4604      	mov	r4, r0
 80035fc:	4620      	mov	r0, r4
 80035fe:	bd38      	pop	{r3, r4, r5, pc}

08003600 <__ieee754_sqrtf>:
 8003600:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8003604:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8003608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800360c:	4603      	mov	r3, r0
 800360e:	4604      	mov	r4, r0
 8003610:	d30a      	bcc.n	8003628 <__ieee754_sqrtf+0x28>
 8003612:	4601      	mov	r1, r0
 8003614:	f7fd f8ee 	bl	80007f4 <__aeabi_fmul>
 8003618:	4601      	mov	r1, r0
 800361a:	4620      	mov	r0, r4
 800361c:	f7fc ffe2 	bl	80005e4 <__addsf3>
 8003620:	4604      	mov	r4, r0
 8003622:	4620      	mov	r0, r4
 8003624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003628:	2a00      	cmp	r2, #0
 800362a:	d0fa      	beq.n	8003622 <__ieee754_sqrtf+0x22>
 800362c:	2800      	cmp	r0, #0
 800362e:	da06      	bge.n	800363e <__ieee754_sqrtf+0x3e>
 8003630:	4601      	mov	r1, r0
 8003632:	f7fc ffd5 	bl	80005e0 <__aeabi_fsub>
 8003636:	4601      	mov	r1, r0
 8003638:	f7fd f990 	bl	800095c <__aeabi_fdiv>
 800363c:	e7f0      	b.n	8003620 <__ieee754_sqrtf+0x20>
 800363e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8003642:	d03c      	beq.n	80036be <__ieee754_sqrtf+0xbe>
 8003644:	15c2      	asrs	r2, r0, #23
 8003646:	2400      	movs	r4, #0
 8003648:	2019      	movs	r0, #25
 800364a:	4626      	mov	r6, r4
 800364c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8003650:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003654:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8003658:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800365c:	07d2      	lsls	r2, r2, #31
 800365e:	bf58      	it	pl
 8003660:	005b      	lslpl	r3, r3, #1
 8003662:	106d      	asrs	r5, r5, #1
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	1872      	adds	r2, r6, r1
 8003668:	429a      	cmp	r2, r3
 800366a:	bfcf      	iteee	gt
 800366c:	461a      	movgt	r2, r3
 800366e:	1856      	addle	r6, r2, r1
 8003670:	1864      	addle	r4, r4, r1
 8003672:	1a9a      	suble	r2, r3, r2
 8003674:	3801      	subs	r0, #1
 8003676:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800367a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800367e:	d1f2      	bne.n	8003666 <__ieee754_sqrtf+0x66>
 8003680:	b1ba      	cbz	r2, 80036b2 <__ieee754_sqrtf+0xb2>
 8003682:	4e15      	ldr	r6, [pc, #84]	@ (80036d8 <__ieee754_sqrtf+0xd8>)
 8003684:	4f15      	ldr	r7, [pc, #84]	@ (80036dc <__ieee754_sqrtf+0xdc>)
 8003686:	6830      	ldr	r0, [r6, #0]
 8003688:	6839      	ldr	r1, [r7, #0]
 800368a:	f7fc ffa9 	bl	80005e0 <__aeabi_fsub>
 800368e:	f8d6 8000 	ldr.w	r8, [r6]
 8003692:	4601      	mov	r1, r0
 8003694:	4640      	mov	r0, r8
 8003696:	f7fd fa55 	bl	8000b44 <__aeabi_fcmple>
 800369a:	b150      	cbz	r0, 80036b2 <__ieee754_sqrtf+0xb2>
 800369c:	6830      	ldr	r0, [r6, #0]
 800369e:	6839      	ldr	r1, [r7, #0]
 80036a0:	f7fc ffa0 	bl	80005e4 <__addsf3>
 80036a4:	6836      	ldr	r6, [r6, #0]
 80036a6:	4601      	mov	r1, r0
 80036a8:	4630      	mov	r0, r6
 80036aa:	f7fd fa41 	bl	8000b30 <__aeabi_fcmplt>
 80036ae:	b170      	cbz	r0, 80036ce <__ieee754_sqrtf+0xce>
 80036b0:	3402      	adds	r4, #2
 80036b2:	1064      	asrs	r4, r4, #1
 80036b4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 80036b8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80036bc:	e7b1      	b.n	8003622 <__ieee754_sqrtf+0x22>
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	0218      	lsls	r0, r3, #8
 80036c2:	460a      	mov	r2, r1
 80036c4:	f101 0101 	add.w	r1, r1, #1
 80036c8:	d5f9      	bpl.n	80036be <__ieee754_sqrtf+0xbe>
 80036ca:	4252      	negs	r2, r2
 80036cc:	e7bb      	b.n	8003646 <__ieee754_sqrtf+0x46>
 80036ce:	3401      	adds	r4, #1
 80036d0:	f024 0401 	bic.w	r4, r4, #1
 80036d4:	e7ed      	b.n	80036b2 <__ieee754_sqrtf+0xb2>
 80036d6:	bf00      	nop
 80036d8:	08003784 	.word	0x08003784
 80036dc:	08003780 	.word	0x08003780

080036e0 <memset>:
 80036e0:	4603      	mov	r3, r0
 80036e2:	4402      	add	r2, r0
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d100      	bne.n	80036ea <memset+0xa>
 80036e8:	4770      	bx	lr
 80036ea:	f803 1b01 	strb.w	r1, [r3], #1
 80036ee:	e7f9      	b.n	80036e4 <memset+0x4>

080036f0 <__errno>:
 80036f0:	4b01      	ldr	r3, [pc, #4]	@ (80036f8 <__errno+0x8>)
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	2000000c 	.word	0x2000000c

080036fc <__libc_init_array>:
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	2600      	movs	r6, #0
 8003700:	4d0c      	ldr	r5, [pc, #48]	@ (8003734 <__libc_init_array+0x38>)
 8003702:	4c0d      	ldr	r4, [pc, #52]	@ (8003738 <__libc_init_array+0x3c>)
 8003704:	1b64      	subs	r4, r4, r5
 8003706:	10a4      	asrs	r4, r4, #2
 8003708:	42a6      	cmp	r6, r4
 800370a:	d109      	bne.n	8003720 <__libc_init_array+0x24>
 800370c:	f000 f81a 	bl	8003744 <_init>
 8003710:	2600      	movs	r6, #0
 8003712:	4d0a      	ldr	r5, [pc, #40]	@ (800373c <__libc_init_array+0x40>)
 8003714:	4c0a      	ldr	r4, [pc, #40]	@ (8003740 <__libc_init_array+0x44>)
 8003716:	1b64      	subs	r4, r4, r5
 8003718:	10a4      	asrs	r4, r4, #2
 800371a:	42a6      	cmp	r6, r4
 800371c:	d105      	bne.n	800372a <__libc_init_array+0x2e>
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	f855 3b04 	ldr.w	r3, [r5], #4
 8003724:	4798      	blx	r3
 8003726:	3601      	adds	r6, #1
 8003728:	e7ee      	b.n	8003708 <__libc_init_array+0xc>
 800372a:	f855 3b04 	ldr.w	r3, [r5], #4
 800372e:	4798      	blx	r3
 8003730:	3601      	adds	r6, #1
 8003732:	e7f2      	b.n	800371a <__libc_init_array+0x1e>
 8003734:	08003788 	.word	0x08003788
 8003738:	08003788 	.word	0x08003788
 800373c:	08003788 	.word	0x08003788
 8003740:	0800378c 	.word	0x0800378c

08003744 <_init>:
 8003744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003746:	bf00      	nop
 8003748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374a:	bc08      	pop	{r3}
 800374c:	469e      	mov	lr, r3
 800374e:	4770      	bx	lr

08003750 <_fini>:
 8003750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003752:	bf00      	nop
 8003754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003756:	bc08      	pop	{r3}
 8003758:	469e      	mov	lr, r3
 800375a:	4770      	bx	lr
